Index: app/src/main/java/com/example/wildtracker/ui/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wildtracker.ui\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport com.example.wildtracker.LoginActivity\r\nimport com.example.wildtracker.LoginActivity.Companion.useremail\r\nimport com.example.wildtracker.R\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.firebase.auth.FirebaseAuth\r\n\r\nclass MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {\r\n    private lateinit var drawer: DrawerLayout\r\n\r\n companion object{\r\n       val auth: String? = FirebaseAuth.getInstance().currentUser?.email\r\n    var user =  auth\r\n}\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        initToolbar()\r\n        initNavigationView()\r\n    }\r\n\r\n\r\n    private fun initToolbar() {\r\n        val toolbar: androidx.appcompat.widget.Toolbar = findViewById(R.id.toolbar_main)\r\n        setSupportActionBar(toolbar)\r\n\r\n        drawer = findViewById(R.id.drawerlayout)\r\n        val toggle = ActionBarDrawerToggle(\r\n            this, drawer, toolbar, R.string.bar_title,\r\n            R.string.navigation_drawer_close\r\n        )\r\n        drawer.addDrawerListener(toggle)\r\n        toggle.syncState()\r\n    }\r\n\r\n    private fun initNavigationView() {\r\n\r\n        val navigationView: NavigationView = findViewById(R.id.nav_view)\r\n        navigationView.setNavigationItemSelectedListener(this)\r\n\r\n        val headerView: View = LayoutInflater.from(this)\r\n            .inflate(R.layout.nav_header_main, navigationView, false)\r\n        //Header para datos del usuario\r\n        navigationView.removeHeaderView(headerView)\r\n        //para actualizar los datos del header\r\n        navigationView.addHeaderView(headerView)\r\n\r\n        val tvUser: TextView = headerView.findViewById(R.id.tvUser)\r\n        tvUser.text = MainActivity.user\r\n\r\n    }\r\n\r\n\r\n    fun callSignOut(view: View) {\r\n        signOut()\r\n    }\r\n\r\n    fun signOut() {\r\n\r\n        useremail = \"\"\r\n        FirebaseAuth.getInstance().signOut()\r\n\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(\"727481893022-adct709pnvj5tlihh532i6gjgm26thh6.apps.googleusercontent.com\")\r\n            .requestEmail()\r\n            .build()\r\n\r\n        val googleSignInClient = GoogleSignIn.getClient(this, gso)\r\n        googleSignInClient.signOut()\r\n        //Cierra sesion y manda devuelta al login\r\n        startActivity(Intent(this, LoginActivity::class.java))\r\n    }\r\n\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.nav_perfil -> callPerfilActivity()\r\n            R.id.nav_inicio -> callInicioActivity()\r\n            R.id.nav_plantillas -> callPlantillasActivity()\r\n            R.id.nav_ejercicio -> callEjercicioActivity()\r\n            R.id.nav_maps -> callMapsActivity()\r\n            R.id.nav_seguimiento -> callSeguimientoActivity()\r\n            R.id.nav_ranking -> callRankingActivity()\r\n            R.id.nav_chat -> callChatActivity()\r\n            R.id.logOut -> signOut()\r\n            R.id.nav_metas -> callMetasActivity()\r\n        }\r\n\r\n        drawer.closeDrawer(GravityCompat.START) // cerrar menu\r\n\r\n        return true\r\n    }\r\n\r\n    private fun callPerfilActivity() {\r\n        val intent = Intent(this, PerfilActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callInicioActivity() {\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callPlantillasActivity() {\r\n        val intent = Intent(this, PlantillasActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callEjercicioActivity() {\r\n        val intent = Intent(this, EjercicioActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMapsActivity() {\r\n        val intent = Intent(this, MapsActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callSeguimientoActivity() {\r\n        val intent = Intent(this, SeguimientoActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callRankingActivity() {\r\n        val intent = Intent(this, RankingActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callChatActivity() {\r\n        val intent = Intent(this, ChatActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMetasActivity() {\r\n        val intent = Intent(this, RecordActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wildtracker/ui/MainActivity.kt b/app/src/main/java/com/example/wildtracker/ui/MainActivity.kt
--- a/app/src/main/java/com/example/wildtracker/ui/MainActivity.kt	(revision 2a11fdbaff4779a7aeb3e89d017d53e60a666c6c)
+++ b/app/src/main/java/com/example/wildtracker/ui/MainActivity.kt	(date 1652202582020)
@@ -17,20 +17,26 @@
 import com.google.android.gms.auth.api.signin.GoogleSignInOptions
 import com.google.android.material.navigation.NavigationView
 import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.FirebaseFirestore
 
 class MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {
     private lateinit var drawer: DrawerLayout
 
- companion object{
-       val auth: String? = FirebaseAuth.getInstance().currentUser?.email
-    var user =  auth
-}
+    private val db = FirebaseFirestore.getInstance()
+
+    companion object{
+        val auth: String? = FirebaseAuth.getInstance().currentUser?.email
+        var user =  auth
+        val listaRutinas = ArrayList<String>()
+    }
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_main)
 
         initToolbar()
         initNavigationView()
+        CargarRutinas()
     }
 
 
@@ -60,7 +66,7 @@
         navigationView.addHeaderView(headerView)
 
         val tvUser: TextView = headerView.findViewById(R.id.tvUser)
-        tvUser.text = MainActivity.user
+        tvUser.text = user
 
     }
 
@@ -114,6 +120,24 @@
         startActivity(intent)
     }
 
+    private fun CargarRutinas(){
+        var LRAux: String
+        user?.let { usuario -> //para cargar las rutinas
+            db.collection("users").document(usuario).collection("rutinas") //abre la base de datos
+                .get().addOnSuccessListener {
+                    for(ejercicio in it){ //para cada rutina
+                        LRAux = (ejercicio.get("id") as Long).toString() //toma el id de la rutina
+                        LRAux += " | " //le pone un texto para darle orden
+                        LRAux += ejercicio.get("nombre").toString() //toma el nombre de la rutina
+                        LRAux += " | " //le pone un texto para darle orden
+                        LRAux += ejercicio.get("ejercicios").toString() //toma los ejercicios
+                        LRAux += " | " //le pone un texto para darle orden
+                        LRAux = (ejercicio.get("nivel") as Long).toString() //toma el nivel de la rutina
+                        listaRutinas.add(LRAux) //y guarda el texto en la lista de ejrcicios
+                    }
+                }
+        }
+    }
     private fun callPlantillasActivity() {
         val intent = Intent(this, PlantillasActivity::class.java)
         startActivity(intent)
Index: app/src/main/java/com/example/wildtracker/ui/PlantillasActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wildtracker.ui\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport com.example.wildtracker.LoginActivity\r\nimport com.example.wildtracker.R\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport android.database.sqlite.SQLiteDatabase\r\nimport android.widget.*\r\nimport android.widget.AdapterView.OnItemClickListener\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\n\r\nclass PlantillasActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {\r\n    //////////////////////////////////////////////////////\r\n\r\n    var buttonAdd: Button ?= null; var buttonRutina: Button ?= null; var buttonEjercicio: Button ?= null\r\n    var listViewRutinas: ListView?= null\r\n\r\n    var validadorMostar = 0\r\n    var listado: java.util.ArrayList<String>? = null\r\n\r\n    private val db = FirebaseFirestore.getInstance()\r\n    var ejerciciosPredeterminados = false\r\n\r\n    val listaEjercicios = ArrayList<String>()\r\n    var LEAux = \"\"\r\n\r\n    var contadorMaxRut = 0; var idFinalRut = 0; var idAux = 0\r\n\r\n    private fun CargarTabla(){\r\n        val datos1 = ArrayList<String>()\r\n\r\n        val helper = LocalDB(this, \"Demo\", null, 1)\r\n        val db: SQLiteDatabase = helper.getReadableDatabase() //Se abre la base de datos\r\n\r\n        val sql = \"select Id, Nombre, Ejercicios from Rutinas\"\r\n        val c = db.rawQuery(sql, null) //Se crea un cursor que ira avanzando de posicion uno a uno\r\n        if (c.moveToFirst()) {\r\n            do { //Mientras se haya movido de posicion va a tomar todos los datos de esa fila\r\n                val linea = c.getString(0) + \" | \" + c.getString(1) + \" | \" + c.getString(2)\r\n                datos1.add(linea)\r\n            } while (c.moveToNext())\r\n        }\r\n        c.close()\r\n        db.close()\r\n\r\n        listado = datos1\r\n        val adapter: ArrayAdapter<String> = ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, listado!!)\r\n        listViewRutinas!!.setAdapter(adapter) //La tabla se adapta en la text view\r\n    }//////////////////////////////////////////////////////////////////\r\n\r\n    private lateinit var drawer: DrawerLayout\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_plantillas)\r\n        initToolbar()\r\n        initNavigationView()\r\n\r\n        buttonAdd = findViewById(R.id.buttonAdd)\r\n        buttonRutina = findViewById(R.id.buttonRutina); buttonRutina!!.setVisibility(View.INVISIBLE); buttonRutina!!.setEnabled(false)\r\n        buttonEjercicio = findViewById(R.id.buttonEjercicio); buttonEjercicio!!.setVisibility(View.INVISIBLE); buttonEjercicio!!.setEnabled(false)\r\n        listViewRutinas = findViewById(R.id.listViewRutinas)\r\n\r\n        MainActivity.user?.let { usuario -> //para cargar los ejercicios por defecto\r\n            db.collection(\"users\").document(usuario).collection(\"ejercicios\")\r\n                .get().addOnSuccessListener {\r\n                if(it.isEmpty){\r\n                    ejerciciosPredeterminados = true\r\n                }\r\n            }\r\n        }\r\n        MainActivity.user?.let { usuario -> //para cargar los ejercicios\r\n            db.collection(\"users\").document(usuario).collection(\"ejercicios\") //abre la base de datos\r\n                .get().addOnSuccessListener {\r\n                    for(ejercicio in it){ //para cada ejercicio\r\n                        LEAux = (ejercicio.get(\"id\") as Long).toString() //toma el id del ejercicio\r\n                        LEAux += \" | \" //le pone un texto para darle orden\r\n                        LEAux += ejercicio.get(\"nombre\").toString() //toma el nombre del ejercicio\r\n                        LEAux += \" | \" //le pone un texto para darle orden\r\n                        LEAux += ejercicio.get(\"tipo\").toString() //toma el tipo\r\n                        LEAux += \" | \" //le pone un texto para darle orden\r\n                        val pesoAux = ejercicio.get(\"peso\").toString()\r\n                        if(pesoAux == \"true\"){\r\n                            LEAux += \"Con peso\"\r\n                        }else{\r\n                            LEAux += \"Sin peso\"\r\n                        }\r\n                        listaEjercicios.add(LEAux) //y guarda el texto en la lista de ejrcicios\r\n                    }\r\n                }\r\n        }\r\n        MainActivity.user?.let { usuario -> //para cargar las rutinas\r\n            db.collection(\"users\").document(usuario).collection(\"rutinas\") //abre la base de datos\r\n                .get().addOnSuccessListener {\r\n                    for(rutina in it){ //para cada rutina\r\n                        contadorMaxRut += 1 //cuenta cuantas rutinas hay\r\n                        idAux = (rutina.get(\"id\") as Long).toInt() //toma el id\r\n                        if(idFinalRut < idAux){ //si es un id mayor\r\n                            idFinalRut = (rutina.get(\"id\") as Long).toInt() //lo va a guardar como el id final\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n        CargarTabla()\r\n\r\n        buttonAdd!!.setOnClickListener{\r\n            if(validadorMostar == 0) {\r\n                buttonRutina!!.setVisibility(View.VISIBLE); buttonRutina!!.setEnabled(true)\r\n                buttonEjercicio!!.setVisibility(View.VISIBLE); buttonEjercicio!!.setEnabled(true)\r\n                validadorMostar = 1\r\n            }else{\r\n                buttonRutina!!.setVisibility(View.INVISIBLE); buttonRutina!!.setEnabled(false)\r\n                buttonEjercicio!!.setVisibility(View.INVISIBLE); buttonEjercicio!!.setEnabled(false)\r\n                validadorMostar = 0\r\n            }\r\n            validadorPredeterDB()\r\n        }\r\n\r\n        buttonRutina!!.setOnClickListener{\r\n            val intent = Intent(this@PlantillasActivity, CreadorRutinas::class.java)\r\n            intent.putExtra(\"LE\", listaEjercicios)\r\n            intent.putExtra(\"ContadorMaxRut\", contadorMaxRut)\r\n            intent.putExtra(\"IdFinalRut\", idFinalRut)\r\n            startActivity(intent)\r\n        }\r\n\r\n        buttonEjercicio!!.setOnClickListener{\r\n            val intent = Intent(this@PlantillasActivity, CreadorEjercicios::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        listViewRutinas!!.onItemClickListener = OnItemClickListener { parent, view, position, id ->\r\n            val num = this.listado!![position].split(\" \").toTypedArray()[0].toInt()\r\n            val intent = Intent(this@PlantillasActivity, EditorRutinas::class.java)\r\n            intent.putExtra(\"Num\", num)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    private fun validadorPredeterDB(){\r\n        if(ejerciciosPredeterminados) {\r\n            var id = 1; var nombre = \"Sentadillas\"; var tipo = \"Piernas\"; var peso = true\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n            id = 2; nombre = \"Saltos de tijera\"; tipo = \"Piernas\"; peso = false\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n            id = 3; nombre = \"Elevación de talones\"; tipo = \"Piernas\"; peso = false\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n\r\n            id = 4; nombre = \"Abdominales\"; tipo = \"Abdomen\"; peso = false\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n            id = 5; nombre = \"Plancha\"; tipo = \"Abdomen\"; peso = false\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n            id = 6; nombre = \"Escaladores\"; tipo = \"Abdomen\"; peso = false\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n\r\n            id = 7; nombre = \"Dominadas\"; tipo = \"Pecho\"; peso = false\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n            id = 8; nombre = \"Press de pecho\"; tipo = \"Pecho\"; peso = true\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n\r\n            id = 9; nombre = \"Peso muerto\"; tipo = \"Espalda\"; peso = true\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n\r\n            id = 10; nombre = \"Punches\"; tipo = \"Brazos\"; peso = false\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n            id = 11; nombre = \"Dips de tríceps\"; tipo = \"Brazos\"; peso = false\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n\r\n            id = 12; nombre = \"Press de hombros\"; tipo = \"Hombros\"; peso = true\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n            id = 13; nombre = \"Elevaciones laterales\"; tipo = \"Hombros\"; peso = true\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n\r\n            id = 14; nombre = \"Flexiones\"; tipo = \"Otro\"; peso = false\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n            id = 15; nombre = \"Burpees\"; tipo = \"Otro\"; peso = false\r\n            ejerciciosPredeterDB(id, nombre, tipo, peso)\r\n        }\r\n    }\r\n\r\n    private fun ejerciciosPredeterDB(Id: Int, Nombre: String, Tipo: String, Peso: Boolean){\r\n        MainActivity.user?.let{ usuario ->\r\n            db.collection(\"users\").document(usuario).collection(\"ejercicios\").document(Id.toString()).set(\r\n                hashMapOf(\r\n                    \"id\" to Id,\r\n                    \"nombre\" to Nombre,\r\n                    \"tipo\" to Tipo,\r\n                    \"peso\" to Peso\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun initToolbar() {\r\n        val toolbar: androidx.appcompat.widget.Toolbar = findViewById(R.id.toolbar_main)\r\n        toolbar.title = \"Plantillas\"\r\n        setSupportActionBar(toolbar)\r\n\r\n        drawer = findViewById(R.id.drawerlayout)!!\r\n        val toggle = ActionBarDrawerToggle(\r\n            this, drawer, toolbar, R.string.bar_title,\r\n            R.string.navigation_drawer_close\r\n        )\r\n        drawer.addDrawerListener(toggle)\r\n        toggle.syncState()\r\n    }\r\n\r\n    private fun initNavigationView() {\r\n\r\n        val navigationView: NavigationView = findViewById(R.id.nav_view)\r\n        navigationView.setNavigationItemSelectedListener(this)\r\n\r\n        val headerView: View = LayoutInflater.from(this)\r\n            .inflate(R.layout.nav_header_main, navigationView, false)\r\n        //Header para datos del usuario\r\n        navigationView.removeHeaderView(headerView)\r\n        //para actualizar los datos del header\r\n        navigationView.addHeaderView(headerView)\r\n\r\n        val tvUser: TextView = headerView.findViewById(R.id.tvUser)\r\n        tvUser.text = MainActivity.user\r\n\r\n    }\r\n\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.nav_perfil -> callPerfilActivity()\r\n            R.id.nav_inicio -> callInicioActivity()\r\n            R.id.nav_plantillas -> callPlantillasActivity()\r\n            R.id.nav_ejercicio -> callEjercicioActivity()\r\n            R.id.nav_maps -> callMapsActivity()\r\n            R.id.nav_seguimiento -> callSeguimientoActivity()\r\n            R.id.nav_ranking -> callRankingActivity()\r\n            R.id.nav_chat -> callChatActivity()\r\n            R.id.logOut -> signOut()\r\n            R.id.nav_metas -> callMetasActivity()\r\n        }\r\n\r\n        drawer.closeDrawer(GravityCompat.START) // cerrar menu\r\n\r\n        return true\r\n    }\r\n\r\n    private fun callPerfilActivity() {\r\n        val intent = Intent(this, PerfilActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callInicioActivity() {\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callPlantillasActivity() {\r\n        val intent = Intent(this, PlantillasActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callEjercicioActivity() {\r\n        val intent = Intent(this, EjercicioActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMapsActivity() {\r\n        val intent = Intent(this, MapsActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callSeguimientoActivity() {\r\n        val intent = Intent(this, SeguimientoActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callRankingActivity() {\r\n        val intent = Intent(this, RankingActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callChatActivity() {\r\n        val intent = Intent(this, ChatActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMetasActivity() {\r\n        val intent = Intent(this, RecordActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun signOut() {\r\n        LoginActivity.useremail = \"\"\r\n        FirebaseAuth.getInstance().signOut()\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(\"727481893022-adct709pnvj5tlihh532i6gjgm26thh6.apps.googleusercontent.com\")\r\n            .requestEmail()\r\n            .build()\r\n        val googleSignInClient = GoogleSignIn.getClient(this, gso)\r\n        googleSignInClient.signOut()\r\n        //Cierra sesion y manda devuelta al login\r\n        startActivity(Intent(this, LoginActivity::class.java))\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wildtracker/ui/PlantillasActivity.kt b/app/src/main/java/com/example/wildtracker/ui/PlantillasActivity.kt
--- a/app/src/main/java/com/example/wildtracker/ui/PlantillasActivity.kt	(revision 2a11fdbaff4779a7aeb3e89d017d53e60a666c6c)
+++ b/app/src/main/java/com/example/wildtracker/ui/PlantillasActivity.kt	(date 1652202678253)
@@ -38,26 +38,11 @@
     var contadorMaxRut = 0; var idFinalRut = 0; var idAux = 0
 
     private fun CargarTabla(){
-        val datos1 = ArrayList<String>()
-
-        val helper = LocalDB(this, "Demo", null, 1)
-        val db: SQLiteDatabase = helper.getReadableDatabase() //Se abre la base de datos
-
-        val sql = "select Id, Nombre, Ejercicios from Rutinas"
-        val c = db.rawQuery(sql, null) //Se crea un cursor que ira avanzando de posicion uno a uno
-        if (c.moveToFirst()) {
-            do { //Mientras se haya movido de posicion va a tomar todos los datos de esa fila
-                val linea = c.getString(0) + " | " + c.getString(1) + " | " + c.getString(2)
-                datos1.add(linea)
-            } while (c.moveToNext())
-        }
-        c.close()
-        db.close()
-
-        listado = datos1
+        MainActivity.listaRutinas.sort() //acomoda las rutinas por id
+        listado = MainActivity.listaRutinas
         val adapter: ArrayAdapter<String> = ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, listado!!)
         listViewRutinas!!.setAdapter(adapter) //La tabla se adapta en la text view
-    }//////////////////////////////////////////////////////////////////
+    }
 
     private lateinit var drawer: DrawerLayout
     override fun onCreate(savedInstanceState: Bundle?) {
Index: app/src/main/java/com/example/wildtracker/ui/CreadorRutinas.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wildtracker.ui\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.*\r\nimport android.widget.AdapterView.OnItemClickListener\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.text.isDigitsOnly\r\nimport java.util.*\r\nimport com.example.wildtracker.R\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\n\r\nclass CreadorRutinas : AppCompatActivity() {\r\n\r\n    var editTextNombre3: EditText ?= null\r\n    private var buttonCrear2: Button?= null\r\n    var listViewEjerciciosHechos: ListView?= null\r\n    var listViewEjerciciosRutina: ListView?= null\r\n\r\n    var listado: ArrayList<String>? = null\r\n    var listado2 = ArrayList<String>()\r\n    var datos = ArrayList<String>()\r\n    var contadorMaxEjer = 0\r\n\r\n    var arregloRutinas = Array<rutina?>(51){null}\r\n    var validadorVacia = true\r\n\r\n    var listaEjercicios = ArrayList<String>()\r\n    var contadorMaxRut = 0; var idFinalRut = 0\r\n\r\n    private val db = FirebaseFirestore.getInstance()\r\n\r\n    private fun CargarTabla() { //Funcion que trae la tabla\r\n        listaEjercicios.sort()\r\n        listado = listaEjercicios\r\n        val adapter: ArrayAdapter<String> = ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, listado!!)\r\n        listViewEjerciciosHechos!!.setAdapter(adapter) //La tabla se adapta en la text view\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_creador_rutinas)\r\n\r\n        val b = intent.extras\r\n        if (b != null) {\r\n            listaEjercicios = b.getStringArrayList(\"LE\") as ArrayList<String>\r\n            contadorMaxRut = b.getInt(\"ContadorMaxRut\")\r\n            idFinalRut = b.getInt(\"IdFinalRut\")\r\n        }\r\n\r\n        editTextNombre3 = findViewById<View>(R.id.editTextNombre3) as EditText\r\n        buttonCrear2 = findViewById(R.id.buttonCrear2)\r\n        listViewEjerciciosHechos = findViewById(R.id.listViewEjerciciosHechos)\r\n        listViewEjerciciosRutina = findViewById(R.id.listViewEjerciciosRutina)\r\n\r\n        Toast.makeText(this, \"Click para añadir a la rutina\", Toast.LENGTH_SHORT).show()\r\n        CargarTabla()\r\n\r\n        buttonCrear2!!.setOnClickListener{\r\n            val nombre = editTextNombre3!!.text.toString()\r\n            if(crear(nombre)){\r\n                if(validadorVacia == true) {\r\n                    val intent = Intent(this@CreadorRutinas, PlantillasActivity::class.java)\r\n                    startActivity(intent)\r\n                }\r\n            }else {\r\n                Toast.makeText(this, \"Se ha alcanzado el numero maximo de rutinas\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n        listViewEjerciciosRutina!!.onItemClickListener = OnItemClickListener { parent, view, position, id ->\r\n            var linea: String\r\n            linea = this.listado2[position].split(\" \").toTypedArray()[0]; linea += \" | \"\r\n            linea += this.listado2[position].split(\" | \").toTypedArray()[1]; linea += \" | \"\r\n            linea += this.listado2[position].split(\" | \").toTypedArray()[2]; linea += \" | \"\r\n            linea += this.listado2[position].split(\" | \").toTypedArray()[3]\r\n\r\n            val posicion = listado2.indexOf(linea) //Toma la posición del ejercicio en el array list\r\n\r\n            listado2.removeAt(posicion) //Remueve el ejercicio del array list\r\n            val adapter: ArrayAdapter<String> = ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, listado2)\r\n            listViewEjerciciosRutina!!.setAdapter(adapter)\r\n\r\n            contadorMaxEjer -= 1\r\n        }\r\n\r\n        listViewEjerciciosHechos!!.onItemClickListener = OnItemClickListener { parent, view, position, id ->\r\n            if(contadorMaxEjer >= 10){ //un validador para que solo hayan max 10 ejercicios\r\n                Toast.makeText(this, \"Solo se pueden agregar 10 ejercicios a la rutina\", Toast.LENGTH_SHORT).show()\r\n            }else {\r\n                var linea: String\r\n                linea = this.listado!![position].split(\" \").toTypedArray()[0]; linea += \" | \" //va a tomar el indice\r\n                linea += this.listado!![position].split(\" | \").toTypedArray()[1]; linea += \" | \" //nombre\r\n                linea += this.listado!![position].split(\" | \").toTypedArray()[2]; linea += \" | \" //tipo\r\n                linea += this.listado!![position].split(\" | \").toTypedArray()[3] //y peso del ejercicio seleccionado\r\n\r\n                datos.add(linea) //y lo va a añadir a\r\n                listado2 = datos //el listado de los ejercicios de rutina\r\n                val adapter: ArrayAdapter<String> = ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, listado2)\r\n                listViewEjerciciosRutina!!.setAdapter(adapter) //después lo va a poner en la listView\r\n\r\n                contadorMaxEjer += 1\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun crear(Nombre: String): Boolean{\r\n        var confirmacion = false\r\n        if(contadorMaxRut <= 50){\r\n            var nombre = Nombre\r\n\r\n            if(nombre == \"\")\r\n                nombre = \"Rutina \" + (idFinalRut + 1)\r\n\r\n            var cadena: String //Variables para tomar los datos\r\n            val arreglo: Array<String?>\r\n\r\n            cadena = listado2.toString() //Toma la lista de los ejercicios\r\n            arreglo = cadena.split(\" \").toTypedArray() //arreglo tiene toda la lista separada por espacios\r\n\r\n            cadena = arreglo[0].toString() //guarda el primer indice de los ejercicios\r\n            cadena += \",\"\r\n            var contador = 0\r\n            for (i in 0 until arreglo.size) {//recorre todo el arreglo\r\n                contador += 1\r\n                if(arreglo[i]!!.isDigitsOnly()){ //si uno de los datos es numero\r\n                    cadena += arreglo[i] //lo añade a la cadena\r\n                    cadena += \",\"\r\n                }\r\n            }\r\n\r\n            contador = 0\r\n            for(i in 0 until cadena.length){\r\n                contador += 1\r\n            }\r\n            cadena = cadena.substring(1, contador - 1) //quita el '[' y la última coma\r\n\r\n            validadorVacia = true\r\n            if(cadena == \"]\"){\r\n                Toast.makeText(this, \"No se puede crear una rutina sin ejercicios\", Toast.LENGTH_SHORT).show()\r\n                validadorVacia = false\r\n            }else {\r\n                arregloRutinas[contadorMaxRut] = rutina(idFinalRut + 1, nombre, cadena)\r\n                guardarBD(arregloRutinas[contadorMaxRut]!!)\r\n            }\r\n\r\n            confirmacion = true\r\n        }\r\n        return confirmacion\r\n    }\r\n\r\n    private fun guardarBD(Rutina: rutina) {\r\n        MainActivity.user?.let{ usuario ->\r\n            db.collection(\"users\").document(usuario).collection(\"rutinas\")\r\n                .document(Rutina.id.toString()).set(\r\n                    hashMapOf(\r\n                        \"id\" to Rutina.id,\r\n                        \"nombre\" to Rutina.nombre,\r\n                        \"ejercicios\" to Rutina.ejercicios,\r\n                        \"nivel\" to 0\r\n                    )\r\n                )\r\n        }\r\n        Toast.makeText(this, \"Se ha guardado el ejercicio\", Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wildtracker/ui/CreadorRutinas.kt b/app/src/main/java/com/example/wildtracker/ui/CreadorRutinas.kt
--- a/app/src/main/java/com/example/wildtracker/ui/CreadorRutinas.kt	(revision 2a11fdbaff4779a7aeb3e89d017d53e60a666c6c)
+++ b/app/src/main/java/com/example/wildtracker/ui/CreadorRutinas.kt	(date 1652201508773)
@@ -11,7 +11,7 @@
 import com.example.wildtracker.R
 import com.google.firebase.firestore.FirebaseFirestore
 
-class CreadorRutinas : AppCompatActivity() {
+class CreadorRutinas : AppCompatActivity() {//////////////////////////////////////////////////////
 
     var editTextNombre3: EditText ?= null
     private var buttonCrear2: Button?= null
Index: app/src/main/java/com/example/wildtracker/ui/PerfilActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wildtracker.ui\r\n\r\nimport android.app.Activity\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.graphics.BitmapFactory\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.view.LayoutInflater\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.*\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.core.view.isVisible\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport com.example.wildtracker.LoginActivity\r\nimport com.example.wildtracker.R\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport java.io.File\r\n\r\nclass PerfilActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {\r\n    private lateinit var drawer: DrawerLayout\r\n    private val db = FirebaseFirestore.getInstance()\r\n    private lateinit var filepath:Uri\r\n    /*var Perfil_birthday = findViewById<EditText>(R.id.Perfil_birthday)\r\n    var Perfil_mail = findViewById<EditText>(R.id.Perfil_mail)\r\n    var Perfil_name = findViewById<EditText>(R.id.Perfil_name)\r\n*/\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_perfil)\r\n        initToolbar()\r\n        initNavigationView()\r\n          setup()\r\n\r\n    }\r\n\r\n    private fun initToolbar() {\r\n        val toolbar: androidx.appcompat.widget.Toolbar = findViewById(R.id.toolbar_main)\r\n        toolbar.title = \"Perfil\"\r\n        setSupportActionBar(toolbar)\r\n\r\n        drawer = findViewById(R.id.drawerlayout)!!\r\n        val toggle = ActionBarDrawerToggle(\r\n            this, drawer, toolbar, R.string.bar_title,\r\n            R.string.navigation_drawer_close\r\n        )\r\n        drawer.addDrawerListener(toggle)\r\n        toggle.syncState()\r\n    }\r\n\r\n    private fun initNavigationView() {\r\n\r\n        val navigationView: NavigationView = findViewById(R.id.nav_view)\r\n        navigationView.setNavigationItemSelectedListener(this)\r\n\r\n        val headerView: View = LayoutInflater.from(this)\r\n            .inflate(R.layout.nav_header_main, navigationView, false)\r\n        //Header para datos del usuario\r\n        navigationView.removeHeaderView(headerView)\r\n        //para actualizar los datos del header\r\n        navigationView.addHeaderView(headerView)\r\n\r\n        val tvUser: TextView = headerView.findViewById(R.id.tvUser)\r\n        tvUser.text = MainActivity.user\r\n\r\n    }\r\n\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.nav_perfil -> callPerfilActivity()\r\n            R.id.nav_inicio -> callInicioActivity()\r\n            R.id.nav_plantillas -> callPlantillasActivity()\r\n            R.id.nav_ejercicio -> callEjercicioActivity()\r\n            R.id.nav_maps -> callMapsActivity()\r\n            R.id.nav_seguimiento -> callSeguimientoActivity()\r\n            R.id.nav_ranking -> callRankingActivity()\r\n            R.id.nav_chat -> callChatActivity()\r\n            R.id.logOut -> signOut()\r\n            R.id.nav_metas -> callMetasActivity()\r\n        }\r\n\r\n        drawer.closeDrawer(GravityCompat.START) // cerrar menu\r\n\r\n        return true\r\n    }\r\n\r\n    private fun callPerfilActivity() {\r\n        val intent = Intent(this, PerfilActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callInicioActivity() {\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callPlantillasActivity() {\r\n\r\n\r\n        val intent = Intent(this, PlantillasActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callEjercicioActivity() {\r\n        val intent = Intent(this, EjercicioActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMapsActivity() {\r\n        val intent = Intent(this, MapsActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callSeguimientoActivity() {\r\n        val intent = Intent(this, SeguimientoActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callRankingActivity() {\r\n        val intent = Intent(this, RankingActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callChatActivity() {\r\n        val intent = Intent(this, ChatActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMetasActivity() {\r\n        val intent = Intent(this, RecordActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n    private fun signOut() {\r\n        LoginActivity.useremail = \"\"\r\n        FirebaseAuth.getInstance().signOut()\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(\"727481893022-adct709pnvj5tlihh532i6gjgm26thh6.apps.googleusercontent.com\")\r\n            .requestEmail()\r\n            .build()\r\n        val googleSignInClient = GoogleSignIn.getClient(this, gso)\r\n        googleSignInClient.signOut()\r\n        //Cierra sesion y manda devuelta al login\r\n        startActivity(Intent(this, LoginActivity::class.java))\r\n    }\r\n    private fun setup(){\r\n\r\n\r\n\r\n\r\n\r\n        val EditProfileDataButton = findViewById<Button>(R.id.EditProfileDataButton)\r\n        val recoverProfileDataButton = findViewById<Button>(R.id.recoverProfileDataButton)\r\n        val saveProfileButton = findViewById<Button>(R.id.saveProfileButton)\r\n        val ChangeProfilePicButton = findViewById<Button>(R.id.ChangeProfilePicButton)\r\n        val edBirthDay =   findViewById<EditText>(R.id.Perfil_birthday)\r\n        val edEmail =   findViewById<EditText>(R.id.Perfil_mail)\r\n        val edName =   findViewById<EditText>(R.id.Perfil_name)\r\n        val ivProfilePic = findViewById<ImageView>(R.id.Perfil_pic)\r\n\r\n        edBirthDay.isEnabled = false\r\n        edEmail.isEnabled = false\r\n        edName.isEnabled = false\r\n        saveProfileButton.isVisible = false\r\n        ChangeProfilePicButton.isVisible = false\r\n        EditProfileDataButton.isVisible = false\r\n\r\n        EditProfileDataButton.isVisible = true\r\n        recoverProfileDataButton.isVisible = false\r\n        MainActivity.user?.let { it1 ->\r\n            db.collection(\"users\").document(MainActivity.user!!).get()\r\n                .addOnSuccessListener {\r\n                edName.setText (it.get(\"Name\") as String?)\r\n                edEmail.setText(it.get(\"email\") as String?)\r\n                edBirthDay.setText(it.get(\"birthDay\") as String?)\r\n\r\n            }\r\n        }\r\n        val progresDialog = ProgressDialog(this)\r\n        progresDialog.setMessage(\"Cargando Imagen\")\r\n        progresDialog.setCancelable(false)\r\n        progresDialog.show()\r\n\r\n\r\n        val userID =FirebaseAuth.getInstance().currentUser!!.email.toString()\r\n        val storageRef = FirebaseStorage.getInstance().reference.child(\"UsersProfileImages/$userID.jpg\")\r\n        val localfile = File.createTempFile(\"tempImage\",\"jpg\")\r\n        storageRef.getFile(localfile).addOnSuccessListener{\r\n\r\n            if(progresDialog.isShowing){\r\n                progresDialog.dismiss()\r\n            }\r\n            val bitmap =BitmapFactory.decodeFile(localfile.absolutePath)\r\n            ivProfilePic.setImageBitmap(bitmap)\r\n\r\n\r\n        }.addOnFailureListener{\r\n            progresDialog.dismiss()\r\n            Toast.makeText(this,\"Recuperación de imagen fallida, sube otra foto\",Toast.LENGTH_SHORT).show()\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n        saveProfileButton.setOnClickListener{\r\n            MainActivity.user?.let { usuario ->\r\n                db.collection(\"users\").document(usuario).set(\r\n                    hashMapOf( \"birthDay\"  to  findViewById<EditText>(R.id.Perfil_birthday).text.toString(),\r\n                        \"email\" to findViewById<EditText>(R.id.Perfil_mail).text.toString(),\r\n                        \"Name\" to findViewById<EditText>(R.id.Perfil_name).text.toString(),\r\n                    )\r\n                )\r\n            }\r\n            saveProfileButton.isVisible = false\r\n            edBirthDay.isEnabled = false\r\n            edEmail.isEnabled = false\r\n            edName.isEnabled = false\r\n            EditProfileDataButton.isVisible = true\r\n\r\n        }\r\n\r\n        EditProfileDataButton.setOnClickListener {\r\n            saveProfileButton.isVisible = true\r\n              edBirthDay.isEnabled = true\r\n            edEmail.isEnabled = true\r\n            edName.isEnabled = true\r\n            EditProfileDataButton.isVisible = false\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ChangeProfilePicButton.setOnClickListener {\r\n        uploadFile()\r\n        }\r\n        ivProfilePic.setOnClickListener {\r\n          startFileChooser()\r\n            ChangeProfilePicButton.isVisible = true\r\n        }\r\n\r\n    }\r\n\r\n    private fun uploadFile() {\r\n        val ChangeProfilePicButton = findViewById<Button>(R.id.ChangeProfilePicButton)\r\n        val  userID = FirebaseAuth.getInstance().currentUser!!.email.toString()\r\n        if (filepath != null) {\r\n            var pd = ProgressDialog(this)\r\n            pd.setTitle(\"Uploading\")\r\n            pd.show()\r\n            var imageRef = FirebaseStorage.getInstance().reference.child(\"UsersProfileImages/$userID.jpg\")\r\n            imageRef.putFile(filepath)\r\n                .addOnSuccessListener { p0 ->\r\n                    pd.dismiss()\r\n                    Toast.makeText(applicationContext, \"File Uploaded\", Toast.LENGTH_SHORT).show()\r\n                    Toast.makeText(applicationContext, \"${userID}\", Toast.LENGTH_LONG).show()\r\n\r\n                }\r\n                .addOnFailureListener { p0 ->\r\n                    pd.dismiss()\r\n                    Toast.makeText(applicationContext, p0.message, Toast.LENGTH_LONG).show()\r\n                }\r\n                .addOnProgressListener { p0 ->\r\n                    var progress = (100.0 * p0.bytesTransferred) / p0.totalByteCount\r\n                    pd.setMessage(\"Uploaded ${progress.toInt()}%\")\r\n                }\r\n\r\n\r\n        }\r\n        ChangeProfilePicButton.isVisible = false\r\n    }\r\n\r\n    private fun startFileChooser() {\r\n        var i = Intent()\r\n        i.setType(\"image/*\").action = Intent.ACTION_GET_CONTENT\r\n        startActivityForResult(Intent.createChooser(i,\"Elige una imagen\"),111)\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        val ivProfilePic = findViewById<ImageView>(R.id.Perfil_pic)\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if(requestCode==111 && resultCode==Activity.RESULT_OK && data!=null)\r\n        {\r\n            filepath =data.data!!\r\n            var bitmap = MediaStore.Images.Media.getBitmap(contentResolver,filepath)\r\n            ivProfilePic.setImageBitmap(bitmap)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wildtracker/ui/PerfilActivity.kt b/app/src/main/java/com/example/wildtracker/ui/PerfilActivity.kt
--- a/app/src/main/java/com/example/wildtracker/ui/PerfilActivity.kt	(revision 2a11fdbaff4779a7aeb3e89d017d53e60a666c6c)
+++ b/app/src/main/java/com/example/wildtracker/ui/PerfilActivity.kt	(date 1652202581994)
@@ -40,7 +40,6 @@
         initToolbar()
         initNavigationView()
           setup()
-
     }
 
     private fun initToolbar() {
@@ -104,8 +103,6 @@
     }
 
     private fun callPlantillasActivity() {
-
-
         val intent = Intent(this, PlantillasActivity::class.java)
         startActivity(intent)
     }
