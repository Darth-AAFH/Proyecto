Index: app/src/main/java/com/example/wildtracker/ui/PerfilActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wildtracker.ui\r\n\r\nimport android.app.Activity\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.graphics.BitmapFactory\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.view.LayoutInflater\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.*\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.core.view.isVisible\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport com.example.wildtracker.LoginActivity\r\nimport com.example.wildtracker.R\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport java.io.File\r\n\r\nclass PerfilActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {\r\n    private lateinit var drawer: DrawerLayout\r\n    private val db = FirebaseFirestore.getInstance()\r\n    private lateinit var filepath:Uri\r\n    /*var Perfil_birthday = findViewById<EditText>(R.id.Perfil_birthday)\r\n    var Perfil_mail = findViewById<EditText>(R.id.Perfil_mail)\r\n    var Perfil_name = findViewById<EditText>(R.id.Perfil_name)\r\n*/\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_perfil)\r\n        initToolbar()\r\n        initNavigationView()\r\n          setup()\r\n\r\n    }\r\n\r\n    private fun initToolbar() {\r\n        val toolbar: androidx.appcompat.widget.Toolbar = findViewById(R.id.toolbar_main)\r\n        toolbar.title = \"Perfil\"\r\n        setSupportActionBar(toolbar)\r\n\r\n        drawer = findViewById(R.id.drawerlayout)!!\r\n        val toggle = ActionBarDrawerToggle(\r\n            this, drawer, toolbar, R.string.bar_title,\r\n            R.string.navigation_drawer_close\r\n        )\r\n        drawer.addDrawerListener(toggle)\r\n        toggle.syncState()\r\n    }\r\n\r\n    private fun initNavigationView() {\r\n\r\n        val navigationView: NavigationView = findViewById(R.id.nav_view)\r\n        navigationView.setNavigationItemSelectedListener(this)\r\n\r\n        val headerView: View = LayoutInflater.from(this)\r\n            .inflate(R.layout.nav_header_main, navigationView, false)\r\n        //Header para datos del usuario\r\n        navigationView.removeHeaderView(headerView)\r\n        //para actualizar los datos del header\r\n        navigationView.addHeaderView(headerView)\r\n\r\n        val tvUser: TextView = headerView.findViewById(R.id.tvUser)\r\n        tvUser.text = MainActivity.user\r\n\r\n    }\r\n\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.nav_perfil -> callPerfilActivity()\r\n            R.id.nav_inicio -> callInicioActivity()\r\n            R.id.nav_plantillas -> callPlantillasActivity()\r\n            R.id.nav_ejercicio -> callEjercicioActivity()\r\n            R.id.nav_maps -> callMapsActivity()\r\n            R.id.nav_seguimiento -> callSeguimientoActivity()\r\n            R.id.nav_ranking -> callRankingActivity()\r\n            R.id.nav_chat -> callChatActivity()\r\n            R.id.logOut -> signOut()\r\n            R.id.nav_metas -> callMetasActivity()\r\n        }\r\n\r\n        drawer.closeDrawer(GravityCompat.START) // cerrar menu\r\n\r\n        return true\r\n    }\r\n\r\n    private fun callPerfilActivity() {\r\n        val intent = Intent(this, PerfilActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callInicioActivity() {\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callPlantillasActivity() {\r\n        val intent = Intent(this, PlantillasActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callEjercicioActivity() {\r\n        val intent = Intent(this, EjercicioActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMapsActivity() {\r\n        val intent = Intent(this, MapsActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callSeguimientoActivity() {\r\n        val intent = Intent(this, SeguimientoActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callRankingActivity() {\r\n        val intent = Intent(this, RankingActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callChatActivity() {\r\n        val intent = Intent(this, ChatActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMetasActivity() {\r\n        val intent = Intent(this, RecordActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n    private fun signOut() {\r\n        LoginActivity.useremail = \"\"\r\n        FirebaseAuth.getInstance().signOut()\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(\"727481893022-adct709pnvj5tlihh532i6gjgm26thh6.apps.googleusercontent.com\")\r\n            .requestEmail()\r\n            .build()\r\n        val googleSignInClient = GoogleSignIn.getClient(this, gso)\r\n        googleSignInClient.signOut()\r\n        //Cierra sesion y manda devuelta al login\r\n        startActivity(Intent(this, LoginActivity::class.java))\r\n    }\r\n    private fun setup(){\r\n        val EditProfileDataButton = findViewById<Button>(R.id.EditProfileDataButton)\r\n        val recoverProfileDataButton = findViewById<Button>(R.id.recoverProfileDataButton)\r\n        val saveProfileButton = findViewById<Button>(R.id.saveProfileButton)\r\n        val ChangeProfilePicButton = findViewById<Button>(R.id.ChangeProfilePicButton)\r\n        val edBirthDay =   findViewById<EditText>(R.id.Perfil_birthday)\r\n        val edEmail =   findViewById<EditText>(R.id.Perfil_mail)\r\n        val edName =   findViewById<EditText>(R.id.Perfil_name)\r\n        val ivProfilePic = findViewById<ImageView>(R.id.Perfil_pic)\r\n\r\n        edBirthDay.isEnabled = false\r\n        edEmail.isEnabled = false\r\n        edName.isEnabled = false\r\n        saveProfileButton.isVisible = false\r\n        ChangeProfilePicButton.isVisible = false\r\n        EditProfileDataButton.isVisible = false\r\n\r\n        saveProfileButton.setOnClickListener{\r\n            MainActivity.user?.let { it1 ->\r\n                db.collection(\"users\").document(it1).set(\r\n                    hashMapOf( \"birthDay\"  to  findViewById<EditText>(R.id.Perfil_birthday).text.toString(),\r\n                        \"email\" to findViewById<EditText>(R.id.Perfil_mail).text.toString(),\r\n                        \"Name\" to findViewById<EditText>(R.id.Perfil_name).text.toString(),\r\n                    )\r\n                )\r\n            }\r\n            saveProfileButton.isVisible = false\r\n            edBirthDay.isEnabled = false\r\n            edEmail.isEnabled = false\r\n            edName.isEnabled = false\r\n            EditProfileDataButton.isVisible = true\r\n\r\n        }\r\n\r\n        EditProfileDataButton.setOnClickListener {\r\n            saveProfileButton.isVisible = true\r\n              edBirthDay.isEnabled = true\r\n            edEmail.isEnabled = true\r\n            edName.isEnabled = true\r\n            EditProfileDataButton.isVisible = false\r\n\r\n        }\r\n\r\n        recoverProfileDataButton.setOnClickListener {\r\n            EditProfileDataButton.isVisible = true\r\n            recoverProfileDataButton.isVisible = false\r\n            MainActivity.user?.let { it1 ->\r\n                db.collection(\"users\").document(it1).get().addOnSuccessListener{\r\n                    edBirthDay.setText(it.get(\"birthDay\") as String?)\r\n                    edEmail.setText(it.get(\"email\") as String?)\r\n                    edName.setText(it.get(\"Name\") as String?)\r\n                }\r\n            }\r\n            val progresDialog = ProgressDialog(this)\r\n            progresDialog.setMessage(\"Cargando Imagen\")\r\n            progresDialog.setCancelable(false)\r\n            progresDialog.show()\r\n\r\n\r\n            val userID =FirebaseAuth.getInstance().currentUser!!.email.toString()\r\n            val storageRef = FirebaseStorage.getInstance().reference.child(\"UsersProfileImages/$userID.jpg\")\r\n            val localfile = File.createTempFile(\"tempImage\",\"jpg\")\r\n            storageRef.getFile(localfile).addOnSuccessListener{\r\n\r\n                if(progresDialog.isShowing){\r\n                    progresDialog.dismiss()\r\n                }\r\n                val bitmap =BitmapFactory.decodeFile(localfile.absolutePath)\r\n                ivProfilePic.setImageBitmap(bitmap)\r\n\r\n\r\n            }.addOnFailureListener{\r\n                progresDialog.dismiss()\r\n                Toast.makeText(this,\"Fallo el recuperar imagen\",Toast.LENGTH_SHORT).show()\r\n\r\n            }\r\n\r\n        }\r\n\r\n        ChangeProfilePicButton.setOnClickListener {\r\n        uploadFile()\r\n        }\r\n        ivProfilePic.setOnClickListener {\r\n          startFileChooser()\r\n            ChangeProfilePicButton.isVisible = true\r\n        }\r\n\r\n    }\r\n\r\n    private fun uploadFile() {\r\n        val ChangeProfilePicButton = findViewById<Button>(R.id.ChangeProfilePicButton)\r\n        val  userID = FirebaseAuth.getInstance().currentUser!!.email.toString()\r\n        if (filepath != null) {\r\n            var pd = ProgressDialog(this)\r\n            pd.setTitle(\"Uploading\")\r\n            pd.show()\r\n            var imageRef = FirebaseStorage.getInstance().reference.child(\"UsersProfileImages/$userID.jpg\")\r\n            imageRef.putFile(filepath)\r\n                .addOnSuccessListener { p0 ->\r\n                    pd.dismiss()\r\n                    Toast.makeText(applicationContext, \"File Uploaded\", Toast.LENGTH_SHORT).show()\r\n                    Toast.makeText(applicationContext, \"${userID}\", Toast.LENGTH_LONG).show()\r\n\r\n                }\r\n                .addOnFailureListener { p0 ->\r\n                    pd.dismiss()\r\n                    Toast.makeText(applicationContext, p0.message, Toast.LENGTH_LONG).show()\r\n                }\r\n                .addOnProgressListener { p0 ->\r\n                    var progress = (100.0 * p0.bytesTransferred) / p0.totalByteCount\r\n                    pd.setMessage(\"Uploaded ${progress.toInt()}%\")\r\n                }\r\n\r\n\r\n        }\r\n        ChangeProfilePicButton.isVisible = false\r\n    }\r\n\r\n    private fun startFileChooser() {\r\n        var i = Intent()\r\n        i.setType(\"image/*\").action = Intent.ACTION_GET_CONTENT\r\n        startActivityForResult(Intent.createChooser(i,\"Elige una imagen\"),111)\r\n    }\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        val ivProfilePic = findViewById<ImageView>(R.id.Perfil_pic)\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if(requestCode==111 && resultCode==Activity.RESULT_OK && data!=null)\r\n        {\r\n            filepath =data.data!!\r\n            var bitmap = MediaStore.Images.Media.getBitmap(contentResolver,filepath)\r\n            ivProfilePic.setImageBitmap(bitmap)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wildtracker/ui/PerfilActivity.kt b/app/src/main/java/com/example/wildtracker/ui/PerfilActivity.kt
--- a/app/src/main/java/com/example/wildtracker/ui/PerfilActivity.kt	(revision 9d34c4a60ad33e6225c211832afe47fa2eb1b4c5)
+++ b/app/src/main/java/com/example/wildtracker/ui/PerfilActivity.kt	(date 1651114072849)
@@ -169,8 +169,8 @@
         EditProfileDataButton.isVisible = false
 
         saveProfileButton.setOnClickListener{
-            MainActivity.user?.let { it1 ->
-                db.collection("users").document(it1).set(
+            MainActivity.user?.let { usuario ->
+                db.collection("users").document(usuario).collection("Ejercicios").document().set(
                     hashMapOf( "birthDay"  to  findViewById<EditText>(R.id.Perfil_birthday).text.toString(),
                         "email" to findViewById<EditText>(R.id.Perfil_mail).text.toString(),
                         "Name" to findViewById<EditText>(R.id.Perfil_name).text.toString(),
@@ -199,9 +199,9 @@
             recoverProfileDataButton.isVisible = false
             MainActivity.user?.let { it1 ->
                 db.collection("users").document(it1).get().addOnSuccessListener{
-                    edBirthDay.setText(it.get("birthDay") as String?)
+                    var nomber = (it.get("birthDay") as String?)
                     edEmail.setText(it.get("email") as String?)
-                    edName.setText(it.get("Name") as String?)
+                    edName.setText (it.get("Name") as String?)
                 }
             }
             val progresDialog = ProgressDialog(this)
Index: app/src/main/java/com/example/wildtracker/ui/MapsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wildtracker.ui\r\n\r\nimport android.Manifest\r\nimport android.annotation.SuppressLint\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.location.Location\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.*\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.core.view.isVisible\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport com.example.wildtracker.LoginActivity\r\nimport com.example.wildtracker.R\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory\r\nimport com.google.android.gms.maps.model.Marker\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.firestore.FieldValue\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.android.gms.maps.model.LatLng as LatLng1\r\n\r\n\r\nclass MapsActivity : AppCompatActivity(), OnMapReadyCallback,\r\n    NavigationView.OnNavigationItemSelectedListener {\r\n\r\n\r\n    /** Instancia a la base de datos */\r\n    private val db = FirebaseFirestore.getInstance()\r\n    private lateinit var drawer: DrawerLayout\r\n\r\n    /**\r\n     * Variable para hacer referencia a la clase de Google Maps y ser la\r\n     * entrada a los metodos relacionados con los mapas.\r\n     */\r\n    private lateinit var map: GoogleMap\r\n    private lateinit var builder: AlertDialog.Builder\r\n\r\n    /**\r\n     * Lista de marcadores en donde se almacenan los datos de los puntos\r\n     * del mapa\r\n     *\r\n     * @param Position Longitud y latitud : Latlng\r\n     * @param Tittle Titulo del marcador : String\r\n     * @param spippet Descripcion del marcador : String\r\n     */\r\n    private var markers: MutableList<Marker> = mutableListOf<Marker>()\r\n\r\n    companion object {\r\n        const val REQUEST_CODE_LOCATION = 0\r\n    }\r\n\r\n    /**\r\n     * Funcion al iniciar la actividad\r\n     *\r\n     * @throws LocationServices accede a la ubicación\r\n     */\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_maps)\r\n        LocationServices.getFusedLocationProviderClient(this)\r\n        createMapFragment()\r\n        initToolbar()\r\n        initNavigationView()\r\n    }\r\n\r\n    /**\r\n     * @throws isPermissionsGranted Determina que se haya concedido un\r\n     *     permiso en especifico\r\n     * @param Manifest.permission.ACCESS_FINE_LOCATION Permiso a la\r\n     *     ubicacion actual del usuario\r\n     */\r\n    private fun isPermissionsGranted() = ContextCompat.checkSelfPermission(\r\n        this,\r\n        Manifest.permission.ACCESS_FINE_LOCATION\r\n    ) == PackageManager.PERMISSION_GRANTED\r\n\r\n\r\n    /**\r\n     * Revisa si la ubicación está habilitada, si no lo esta, una\r\n     * función la manda habilitar\r\n     */\r\n    @SuppressLint(\"MissingPermission\")\r\n    private fun enableMyLocation() {\r\n        if (!::map.isInitialized) return\r\n        if (isPermissionsGranted()) {\r\n            map.isMyLocationEnabled = true\r\n\r\n        } else {\r\n            requestLocationPermission()\r\n        }\r\n\r\n    }\r\n\r\n    /** Solicita el acceso a la ubicación */\r\n    private fun requestLocationPermission() {\r\n        if (ActivityCompat.shouldShowRequestPermissionRationale(\r\n                this,\r\n                Manifest.permission.ACCESS_FINE_LOCATION\r\n            )\r\n        ) {\r\n            Toast.makeText(this, \"Ve a ajustes y acepta los permisos\", Toast.LENGTH_SHORT).show()\r\n\r\n        } else {\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\r\n                REQUEST_CODE_LOCATION\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * En el resultado de pedir el permiso de ubicación\r\n     *\r\n     * @return Bool de map.IsLocationEnabled\r\n     */\r\n    @SuppressLint(\"MissingPermission\")\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        when (requestCode) {\r\n            REQUEST_CODE_LOCATION -> if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                map.isMyLocationEnabled = true\r\n            } else {\r\n                Toast.makeText(\r\n                    this,\r\n                    \"Para activar la localización ve a ajustes y acepta los permisos\",\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n\r\n            }\r\n            else -> {}\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Función que se manda a llamar cuando se pudo acceder a la\r\n     * ubicación y el mapa se ha cargado\r\n     *\r\n     * @param map Instancia de un mapa de Google\r\n     */\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n        map = googleMap\r\n        map.setOnMapLongClickListener { latLng ->\r\n            showAlertAddDialog(latLng)\r\n        }\r\n        map.setOnInfoWindowLongClickListener { markerToDelete ->\r\n\r\n            showAlertDeleteDialog(markerToDelete,markerToDelete.snippet )\r\n        }\r\n       /* map.setOnMarkerClickListener {\r\n            askForAddOrDelete(markers.snippet)\r\n        }*/\r\n        createMarker()\r\n        enableMyLocation()\r\n\r\n        /*\r\n        * Cuando se carga el mapa, accede a Firebase Cloud Firestore y trae todos los datos\r\n        * que se encuentran en \"locations\" asignando los respectivos valores de cada marcador\r\n        * para asi poder mostrarlos en el mapa       * */\r\n        db.collection(\"locations\").get().addOnSuccessListener {\r\n\r\n            for (document in it) { // Entra a las propiedades de cada \"locations\"\r\n                val lat = document.get(\"latitud\") as Double\r\n                val lng = document.get(\"longitud\") as Double\r\n                val latLng: LatLng1 = LatLng1(lat, lng)\r\n                val placeType = document.get(\"tipo\") as String\r\n                val contadorAñadido = document.get(\"contador añadir\") as Long\r\n                val contadorEliminar = document.get(\"contador eliminar\") as Long\r\n\r\n                //Verifica que tipo de marcador es: Parque || Gimnasio para asi poder añadir cada marcador de cada \"location\"\r\n\r\n\r\n                if (placeType.equals(\"Parque\") && contadorAñadido.toInt() >= 5 && contadorEliminar>-4) {\r\n                    val marker = map.addMarker(\r\n                        MarkerOptions().position(latLng)\r\n                            .title(\"${document.get(\"tipo\") as String}\")\r\n                            .snippet(\"${document.get(\"descripcion\") as String}\")\r\n                            .icon(BitmapDescriptorFactory.fromResource(R.drawable.park))\r\n                    )\r\n                    markers.add(marker!!)\r\n                } else if (placeType.equals(\"Gimnasio\") && contadorAñadido.toInt() >= 5 && contadorEliminar>-4) {\r\n                    val marker = map.addMarker(\r\n                        MarkerOptions().position(latLng)\r\n                            .title(\"${document.get(\"tipo\") as String}\")\r\n                            .snippet(\"${document.get(\"descripcion\") as String}\")\r\n                            .icon(BitmapDescriptorFactory.fromResource(R.drawable.gym))\r\n                    )\r\n                    markers.add(marker!!)\r\n                } else {\r\n                    val marker = map.addMarker(\r\n                        MarkerOptions().position(latLng)\r\n                            .title(\"${document.get(\"tipo\") as String}\")\r\n                            .snippet(\"${document.get(\"descripcion\") as String}\")\r\n                            .icon(BitmapDescriptorFactory.fromResource(R.drawable.fantasma))\r\n                    )\r\n                    markers.add(marker!!)\r\n                    if (contadorEliminar.toInt() < -4) {\r\n                        deleteMarker(marker)\r\n                        db.collection(\"locations\").document(\"${marker.snippet}\").delete()\r\n                        markers.remove(marker)\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Muestra 2 tipos de alert Dialog:\r\n     * 1. Para preguntar si que quiere añadir un nuevo marcador: Si ||\r\n     *    No || ?\r\n     * 2. Para verificar que se desea añadir\r\n     */\r\n    private fun showAlertAddDialog(latLng: LatLng1) {\r\n        //Inicializa el primer AlertDialog\r\n        builder = AlertDialog.Builder(this)\r\n        val dialogBuilder = AlertDialog.Builder(this)\r\n        builder.setTitle(\"Marcador nuevo\")\r\n            .setMessage(\"Quieres Agregar un nuevo marcador?\")\r\n            .setCancelable(true)\r\n            .setPositiveButton(\"Si\")\r\n            { dialogInterface, it ->\r\n                val inflater = this.layoutInflater\r\n                //Infla la vista del mapa con el nuevo dialog para pedir los datos del lugar\r\n                /**\r\n                 * Vista del DialogAlert para llenar datos de un\r\n                 * marcador en el mapa\r\n                 */\r\n                val dialogView: View = inflater.inflate(R.layout.dialog_interface, null)\r\n                dialogBuilder.setView(dialogView)\r\n                /**\r\n                 * Edit text para la descripción del lugar en el mapa\r\n                 */\r\n                val etMarkerDescription = dialogView.findViewById<View>(R.id.PlacesName) as EditText\r\n\r\n                /**\r\n                 * Segundo AlertDialog para verificar el punto a añadir\r\n                 */\r\n                val alertDialog: AlertDialog = dialogBuilder.create()\r\n                alertDialog.show()\r\n                /** Boton para confirmar el añadir lugar */\r\n                val btAddMarkerAlertDialog = dialogView.findViewById<Button>(R.id.buttonAddAlert)\r\n                btAddMarkerAlertDialog.isVisible = false\r\n                /** Boton para cancelar el añadir lugar */\r\n                val btCancell = dialogView.findViewById<Button>(R.id.buttonCancelAlert)\r\n                val radioGroup = dialogView.findViewById<RadioGroup>(R.id.RadioGroupDialog)\r\n\r\n                /**\r\n                 * Variable que almacena el tipo de lugar del marcador\r\n                 * añadido\r\n                 */\r\n                var selectedPlace = \"\"\r\n\r\n                /**RadioGrup elige el tipo de marcador a añadir: Parque || Gimnasio\r\n                 * y despues pasarlo a String deselectedPlace */\r\n                radioGroup.setOnCheckedChangeListener { radioGroup, selectedId ->\r\n                    when (selectedId) {\r\n\r\n                        R.id.rdBtnPark -> {\r\n                            selectedPlace = \"Parque\"\r\n                            btAddMarkerAlertDialog.isVisible = true\r\n                        }\r\n                        R.id.rdBtnGym -> {\r\n                            selectedPlace = \"Gimnasio\"\r\n                            btAddMarkerAlertDialog.isVisible = true\r\n                        }\r\n                        else -> btAddMarkerAlertDialog.isVisible = false\r\n\r\n                    }\r\n                }\r\n                btAddMarkerAlertDialog.setOnClickListener {\r\n                    /**Obtiene la descripción del marcador a colocar en el mapa*/\r\n                    var edDescripction = etMarkerDescription.text.toString()\r\n                    if (edDescripction.isEmpty())\r\n                        etMarkerDescription.error = \"Añade una descripción al lugar\"\r\n                    else {\r\n                        addMarker(latLng, edDescripction, selectedPlace)\r\n                        alertDialog.dismiss()\r\n                    }\r\n                }\r\n                btCancell.setOnClickListener { alertDialog.dismiss() }\r\n\r\n            }\r\n            .setNegativeButton(\"No\") { dialogInterface, it -> dialogInterface.cancel() }\r\n            .setNeutralButton(\"?\") { dialogInterface, it ->\r\n                Toast.makeText(\r\n                    this@MapsActivity,\r\n                    \"Agregar un punto en el marcador\", Toast.LENGTH_SHORT\r\n                ).show()\r\n            }\r\n            .show()\r\n    }\r\n\r\n    /**\r\n     * Funcion para añadir marcadores en el mapa\r\n     * @param latLng  Latlng -> Recibe latitud y longitud\r\n     * @param descripcion  String -> Descripción del lugar a añadir\r\n     * @param selectedPlace String -> Tipo de lugar \"Parque\" o \"Gimnasio\"\r\n     */\r\n    private fun addMarker(latLng: LatLng1, descripcion: String, selectedPlace: String) {\r\n        //Separar lat y lng para despues almacenarla en la base de datos como datos de tipo Double\r\n        val latitud: Double = latLng.latitude\r\n        val longitud: Double = latLng.longitude\r\n        var contadorAñadir: Int = 0\r\n        var contadorEliminar: Int = 0\r\n        val ghostmarker = map.addMarker(\r\n            MarkerOptions().position(latLng).title(\"${selectedPlace}\").snippet(\"${descripcion}\")\r\n                .icon(BitmapDescriptorFactory.fromResource(R.drawable.fantasma))\r\n        )\r\n        markers.add(ghostmarker!!)\r\n        /*\r\n        // Añadir un marcador dependiendo del tipo de lugar \"Gimasio\" o \"Parque\"\r\n        if (selectedPlace.equals(\"Parque\")) {\r\n            val marker = map.addMarker(\r\n                MarkerOptions().position(latLng).title(\"${selectedPlace}\").snippet(\"${descripcion}\")\r\n                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.park))\r\n            )\r\n            markers.add(marker!!)\r\n\r\n\r\n        } else if (selectedPlace.equals(\"Gimnasio\")) {\r\n            val marker = map.addMarker(\r\n                MarkerOptions().position(latLng).title(\"${selectedPlace}\").snippet(\"${descripcion}\")\r\n                    .icon(BitmapDescriptorFactory.fromResource(R.drawable.gym))\r\n            )\r\n            markers.add(marker!!)\r\n\r\n\r\n        }*/\r\n        /**Añade a la base de datos marcadores*/\r\n        db.collection(\"locations\").document(\"$descripcion\").set(\r\n            hashMapOf(\r\n                \"latitud\" to latitud,\r\n                \"longitud\" to longitud,\r\n                \"descripcion\" to descripcion,\r\n                \"tipo\" to selectedPlace,\r\n                \"contador añadir\" to contadorAñadir,\r\n                \"contador eliminar\" to contadorEliminar\r\n\r\n            )\r\n\r\n        )\r\n        val markerRef = db.collection(\"locations\").document(\"$descripcion\")\r\n\r\n        markerRef.update(\"contador añadir\", FieldValue.increment(1))\r\n    }\r\n\r\n    /**AlertDialog para preguntar si se desea eliminar un marcador en el mapa o sumar puntos a añadirlo*/\r\n    private fun showAlertDeleteDialog(markerToDelete: Marker, snippet: String?) {\r\n        Toast.makeText(this,snippet,Toast.LENGTH_SHORT).show()\r\n        val markerRef = db.collection(\"locations\").document(\"$snippet\")\r\n        builder = AlertDialog.Builder(this)\r\n        builder.setTitle(\"Marcador seleccionado\")\r\n            .setMessage(\"Que desea hacer con este punto?\")\r\n            .setCancelable(true)\r\n            .setPositiveButton(\"Añadir\") { dialogInterface, it ->\r\n                //deleteMarker(markerToDelete)\r\n\r\n                markerRef.update(\"contador añadir\", FieldValue.increment(1))\r\n                finish();\r\n                startActivity(getIntent());\r\n            }\r\n            .setNegativeButton(\"Eliminar\") { dialogInterface, it -> //dialogInterface.cancel()\r\n                markerRef.update(\"contador eliminar\", FieldValue.increment(-1))\r\n                finish();\r\n                startActivity(getIntent());\r\n            }\r\n            .show()\r\n\r\n    }\r\n\r\n    /**Funcion para eliminar el marcador seleccionado en el mapa*/\r\n    private fun deleteMarker(markerToDelete: Marker) {\r\n        Log.i(TAG, \"OnWindowClickDelete\")\r\n        markers.remove(markerToDelete)\r\n        markerToDelete.remove()\r\n    }\r\n\r\n    /**\r\n     * Obtiene la ultima Ubicación del usuario\r\n     */\r\n    @SuppressLint(\"MissingPermission\")\r\n    private fun createMarker() {\r\n        val fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\r\n\r\n        fusedLocationClient.lastLocation\r\n            .addOnSuccessListener { location: Location? ->\r\n                val la = location?.latitude\r\n                val lo = location?.longitude\r\n                val aqui = LatLng1(la!!, lo!!)\r\n                map.animateCamera(\r\n                    CameraUpdateFactory.newLatLngZoom(aqui, 18f),\r\n                    1000,\r\n                    null\r\n                )\r\n            }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Iniciar interfaces graficas\r\n     */\r\n    private fun initToolbar() {\r\n        val toolbar: androidx.appcompat.widget.Toolbar = findViewById(R.id.toolbar_main)\r\n        toolbar.title = \"Maps\"\r\n        setSupportActionBar(toolbar)\r\n\r\n        drawer = findViewById(R.id.drawerlayout)\r\n        val toggle = ActionBarDrawerToggle(\r\n            this, drawer, toolbar, R.string.bar_title,\r\n            R.string.navigation_drawer_close\r\n        )\r\n        drawer.addDrawerListener(toggle)\r\n        toggle.syncState()\r\n    }\r\n\r\n    /**\r\n     * Iniciar el menu de nav desplegable\r\n     */\r\n    private fun initNavigationView() {\r\n\r\n        val navigationView: NavigationView = findViewById(R.id.nav_view)\r\n        navigationView.setNavigationItemSelectedListener(this)\r\n\r\n        val headerView: View = LayoutInflater.from(this)\r\n            .inflate(R.layout.nav_header_main, navigationView, false)\r\n        //Header para datos del usuario\r\n        navigationView.removeHeaderView(headerView)\r\n        //para actualizar los datos del header\r\n        navigationView.addHeaderView(headerView)\r\n\r\n        val tvUser: TextView = headerView.findViewById(R.id.tvUser)\r\n        tvUser.text = MainActivity.user\r\n\r\n    }\r\n\r\n    /**\r\n     * Crear el mapa en el activity\r\n     */\r\n    private fun createMapFragment() {\r\n        val mapFragment = supportFragmentManager\r\n            .findFragmentById(R.id.fragggment_map) as SupportMapFragment\r\n        mapFragment.getMapAsync(this)\r\n    }\r\n\r\n    /**\r\n     * Navegación por el menu desplegable\r\n     */\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.nav_perfil -> callPerfilActivity()\r\n            R.id.nav_inicio -> callInicioActivity()\r\n            R.id.nav_plantillas -> callPlantillasActivity()\r\n            R.id.nav_ejercicio -> callEjercicioActivity()\r\n            R.id.nav_maps -> callMapsActivity()\r\n            R.id.nav_seguimiento -> callSeguimientoActivity()\r\n            R.id.nav_ranking -> callRankingActivity()\r\n            R.id.nav_chat -> callChatActivity()\r\n            R.id.logOut -> signOut()\r\n            R.id.nav_metas -> callMetasActivity()\r\n        }\r\n\r\n        drawer.closeDrawer(GravityCompat.START) // cerrar menu\r\n\r\n        return true\r\n    }\r\n\r\n    /**\r\n     * Llamada de actividades\r\n     */\r\n    private fun callPerfilActivity() {\r\n        val intent = Intent(this, PerfilActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n    private fun callInicioActivity() {\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n    private fun callPlantillasActivity() {\r\n        val intent = Intent(this, PlantillasActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n    private fun callEjercicioActivity() {\r\n        val intent = Intent(this, EjercicioActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n    private fun callMapsActivity() {\r\n        val intent = Intent(this, MapsActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n    private fun callSeguimientoActivity() {\r\n        val intent = Intent(this, SeguimientoActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n    private fun callRankingActivity() {\r\n        val intent = Intent(this, RankingActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n    private fun callChatActivity() {\r\n        val intent = Intent(this, ChatActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n    private fun callMetasActivity() {\r\n        val intent = Intent(this, RecordActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    /**\r\n     * Cierre de sesión del usuario\r\n     */\r\n    private fun signOut() {\r\n        LoginActivity.useremail = \"\"\r\n        FirebaseAuth.getInstance().signOut()\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(\"727481893022-adct709pnvj5tlihh532i6gjgm26thh6.apps.googleusercontent.com\")\r\n            .requestEmail()\r\n            .build()\r\n        val googleSignInClient = GoogleSignIn.getClient(this, gso)\r\n        googleSignInClient.signOut()\r\n        //Cierra sesion y manda devuelta al login\r\n        startActivity(Intent(this, LoginActivity::class.java))\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wildtracker/ui/MapsActivity.kt b/app/src/main/java/com/example/wildtracker/ui/MapsActivity.kt
--- a/app/src/main/java/com/example/wildtracker/ui/MapsActivity.kt	(revision 9d34c4a60ad33e6225c211832afe47fa2eb1b4c5)
+++ b/app/src/main/java/com/example/wildtracker/ui/MapsActivity.kt	(date 1651114072855)
@@ -181,7 +181,7 @@
         * que se encuentran en "locations" asignando los respectivos valores de cada marcador
         * para asi poder mostrarlos en el mapa       * */
         db.collection("locations").get().addOnSuccessListener {
-
+            var ultimo = it.last().get("ID")
             for (document in it) { // Entra a las propiedades de cada "locations"
                 val lat = document.get("latitud") as Double
                 val lng = document.get("longitud") as Double
Index: app/src/main/java/com/example/wildtracker/ui/CreadorEjercicios.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wildtracker.ui\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.database.sqlite.SQLiteDatabase\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.text.isDigitsOnly\r\nimport com.example.wildtracker.R\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\n\r\nclass CreadorEjercicios : AppCompatActivity() {\r\n\r\n    var editTextNombre: EditText ?= null\r\n    @SuppressLint(\"UseSwitchCompatOrMaterialCode\") private var switchPeso: Switch ?= null\r\n    private var buttonCrear: Button?= null; private var buttonEditar: Button ?= null\r\n\r\n    var arregloEjercicios = Array<ejercicio?>(66){null}\r\n    var validadorNombre = true\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_creador_ejercicios)\r\n\r\n        editTextNombre = findViewById<View>(R.id.editTextNombre) as EditText\r\n        switchPeso = findViewById<View>(R.id.switchPeso) as Switch\r\n        buttonCrear = findViewById(R.id.buttonCrear)\r\n        buttonEditar = findViewById(R.id.buttonEditar)\r\n        val spinnerTipos: Spinner = findViewById(R.id.spinnerTipos)\r\n\r\n        val lista0 = listOf(\"Piernas\", \"Abdomen\", \"Pecho\", \"Espalda\", \"Brazos\", \"Hombros\", \"Otro\")\r\n        val adaptador0 = ArrayAdapter(this, android.R.layout.simple_spinner_item, lista0)\r\n        spinnerTipos.adapter = adaptador0\r\n\r\n        buttonCrear!!.setOnClickListener{\r\n            /*val nombre = editTextNombre!!.text.toString(); val tipo = spinnerTipos.selectedItem.toString(); val peso = switchPeso!!.isChecked()\r\n            if(crear(nombre, tipo, peso)){\r\n                if(validadorNombre) {\r\n                    finish()\r\n                }\r\n            }else {\r\n                Toast.makeText(this, \"Se ha alcanzado el numero maximo de ejercicios\", Toast.LENGTH_SHORT).show()\r\n            }\r\n\r\n             */\r\n            crear(\"Lagartijas\", \"Brazos\", false)\r\n        }\r\n\r\n        buttonEditar!!.setOnClickListener{\r\n            //val intent = Intent(this@CreadorEjercicios, VerEjercicios::class.java)\r\n            //startActivity(intent)\r\n            Toast.makeText(this, \"El nuevo ejercicio debera tener id: \"+aux, Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    private val db = FirebaseFirestore.getInstance()\r\n    var Nombre2: String? = null\r\n    var ultimoEjercicio = 0\r\n    var aux: String ?= null\r\n\r\n    private fun crear(Nombre: String, Tipo: String, validadorPeso: Boolean) {\r\n\r\n        /*var contador = 0\r\n        MainActivity.user?.let { usuario ->\r\n            db.collection(\"users\").document(usuario).collection(\"ejercicios\").get().addOnSuccessListener {\r\n                 for(ejercicio in it){\r\n                     contador += 1\r\n                 }\r\n            }\r\n        }\r\n        MainActivity.user?.let{ usuario ->\r\n            db.collection(\"users\").document(usuario).collection(\"ejercicios\")\r\n                .document(contador.toString()).get().addOnSuccessListener {\r\n                aux = it.get(\"id\") as String?\r\n            }\r\n        }*/\r\n\r\n\r\n        //escribir\r\n        var id = 2\r\n        MainActivity.user?.let{ usuario ->\r\n            db.collection(\"users\").document(usuario).collection(\"ejercicios\").document(id.toString()).set(\r\n                hashMapOf(\r\n                    \"id\" to id,\r\n                    \"nombre\" to Nombre,\r\n                    \"tipo\" to Tipo,\r\n                    \"peso\" to validadorPeso\r\n                )\r\n            )\r\n        }\r\n\r\n\r\n        /*//tomar datos\r\n        var id = 2\r\n        MainActivity.user?.let{ usuario ->\r\n            db.collection(\"users\").document(usuario).collection(\"ejercicios\")\r\n                .document(id.toString()).get().addOnSuccessListener {\r\n                    Nombre2 = it.get(\"nombre\") as String?\r\n\r\n                }\r\n        }\r\n        */\r\n\r\n    }\r\n\r\n    /*private fun crear(Nombre: String, Tipo: String, validadorPeso: Boolean): Boolean {\r\n        var contadorMax = 1; var idFinal = 0\r\n\r\n        val helper = LocalDB(this, \"Demo\", null, 1)\r\n        val db: SQLiteDatabase = helper.getReadableDatabase() //Se abre la base de datos\r\n\r\n        val sql = \"select Id, Nombre, Tipo, Peso from Ejercicios\" //Se puede solo con el ID?\r\n        val c = db.rawQuery(sql, null) //Se crea un cursor\r\n        if (c.moveToFirst()) {\r\n            do {\r\n                contadorMax += 1 ////////Toma la cantidad de ejercicios que hayan\r\n                idFinal = c.getInt(0) ///Toma el id del ultimo ejercicio\r\n            } while (c.moveToNext())\r\n        }\r\n        c.close()\r\n        db.close()\r\n\r\n        var confirmacion = false\r\n        if(contadorMax <= 65){//////////////numero máx de ejercicios que el usuario puede crear (50)\r\n            var nombre = Nombre; val tipo = Tipo; val peso = validadorPeso\r\n\r\n            if(nombre == \"\")\r\n                nombre = \"Ejercicio\" + (idFinal - 14)\r\n\r\n            val arreglo: Array<String?>\r\n            arreglo = nombre.split(\" \").toTypedArray()\r\n\r\n            validadorNombre = true\r\n            for (i in 0 until arreglo.size) {//recorre todo el nombre\r\n                if(arreglo[i]!!.isDigitsOnly()) { //si uno de los datos es numero\r\n                    Toast.makeText(this, \"El nombre de un ejercicio no puede contener numeros\", Toast.LENGTH_SHORT).show()\r\n                    validadorNombre = false\r\n                }\r\n            }\r\n\r\n            if(validadorNombre == true){\r\n                arregloEjercicios[contadorMax] = ejercicio(idFinal+1, nombre, tipo, peso)\r\n                guardarLocal(arregloEjercicios[contadorMax]!!)\r\n            }\r\n\r\n            confirmacion = true\r\n        }\r\n        return confirmacion\r\n    }\r\n\r\n     */\r\n\r\n    private fun guardarLocal(Ejercicio: ejercicio) {\r\n        val helper = LocalDB(this, \"Demo\", null, 1)\r\n        val db: SQLiteDatabase = helper.getWritableDatabase() //Se abre la base de datos\r\n\r\n        try {\r\n            val c = ContentValues() //Se llena con los valores tomados de las editText\r\n            c.put(\"Id\", Ejercicio.id)\r\n            c.put(\"Nombre\", Ejercicio.nombre)\r\n            c.put(\"Tipo\", Ejercicio.tipo)\r\n            c.put(\"Peso\", Ejercicio.peso)\r\n            db.insert(\"EJERCICIOS\", null, c)\r\n            db.close() //Se cierra la base de datos y se manda mensaje de confirmacion\r\n            Toast.makeText(this, \"Se ha guardado el ejercicio\", Toast.LENGTH_SHORT).show()\r\n        } catch (e: Exception) {\r\n            Toast.makeText(this, \"Ha habido un error\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wildtracker/ui/CreadorEjercicios.kt b/app/src/main/java/com/example/wildtracker/ui/CreadorEjercicios.kt
--- a/app/src/main/java/com/example/wildtracker/ui/CreadorEjercicios.kt	(revision 9d34c4a60ad33e6225c211832afe47fa2eb1b4c5)
+++ b/app/src/main/java/com/example/wildtracker/ui/CreadorEjercicios.kt	(date 1651114078366)
@@ -52,18 +52,18 @@
         buttonEditar!!.setOnClickListener{
             //val intent = Intent(this@CreadorEjercicios, VerEjercicios::class.java)
             //startActivity(intent)
-            Toast.makeText(this, "El nuevo ejercicio debera tener id: "+aux, Toast.LENGTH_SHORT).show()
+            Toast.makeText(this, "El nuevo ejercicio debera tener id: "+ultimoEjercicio+1, Toast.LENGTH_SHORT).show()
         }
     }
 
     private val db = FirebaseFirestore.getInstance()
     var Nombre2: String? = null
     var ultimoEjercicio = 0
-    var aux: String ?= null
-
-    private fun crear(Nombre: String, Tipo: String, validadorPeso: Boolean) {
-
-        /*var contador = 0
+
+    private fun crear(Nombre: String, Tipo: String, validadorPeso: Boolean): Boolean {
+
+        var aux: String ?= null
+        var contador = 0
         MainActivity.user?.let { usuario ->
             db.collection("users").document(usuario).collection("ejercicios").get().addOnSuccessListener {
                  for(ejercicio in it){
@@ -76,13 +76,14 @@
                 .document(contador.toString()).get().addOnSuccessListener {
                 aux = it.get("id") as String?
             }
-        }*/
+        }
+        ultimoEjercicio = aux!!.toInt()
 
 
-        //escribir
+        /*//escribir
         var id = 2
         MainActivity.user?.let{ usuario ->
-            db.collection("users").document(usuario).collection("ejercicios").document(id.toString()).set(
+            db.collection("users").document(usuario).collection("ejercicios").document().set(
                 hashMapOf(
                     "id" to id,
                     "nombre" to Nombre,
@@ -90,7 +91,7 @@
                     "peso" to validadorPeso
                 )
             )
-        }
+        }*/
 
 
         /*//tomar datos
@@ -104,6 +105,8 @@
         }
         */
 
+
+        return true
     }
 
     /*private fun crear(Nombre: String, Tipo: String, validadorPeso: Boolean): Boolean {
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetsSelectedWithDialog>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\aalex\\.android\\avd\\Pixel_4_Android_11.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetsSelectedWithDialog>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 9d34c4a60ad33e6225c211832afe47fa2eb1b4c5)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1651114078384)
@@ -1,6 +1,18 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="deploymentTargetDropDown">
+    <targetSelectedWithDropDown>
+      <Target>
+        <type value="QUICK_BOOT_TARGET" />
+        <deviceKey>
+          <Key>
+            <type value="VIRTUAL_DEVICE_PATH" />
+            <value value="C:\Users\aalex\.android\avd\Pixel_4_Android_11.avd" />
+          </Key>
+        </deviceKey>
+      </Target>
+    </targetSelectedWithDropDown>
+    <timeTargetWasSelectedWithDropDown value="2022-04-28T01:18:27.610080400Z" />
     <targetsSelectedWithDialog>
       <Target>
         <type value="QUICK_BOOT_TARGET" />
