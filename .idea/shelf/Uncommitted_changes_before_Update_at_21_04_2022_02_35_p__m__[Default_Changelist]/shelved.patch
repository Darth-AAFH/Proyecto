Index: app/src/main/java/com/example/wildtracker/ui/RankingActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wildtracker.ui\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport com.example.wildtracker.LoginActivity\r\nimport com.example.wildtracker.R\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.firebase.auth.FirebaseAuth\r\n\r\nclass RankingActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {\r\n    private lateinit var drawer: DrawerLayout\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_ranking)\r\n        initToolbar()\r\n        initNavigationView()\r\n    }\r\n\r\n    private fun initToolbar() {\r\n        val toolbar: androidx.appcompat.widget.Toolbar = findViewById(R.id.toolbar_main)\r\n        toolbar.title = \"Ranking\"\r\n        setSupportActionBar(toolbar)\r\n\r\n        drawer = findViewById(R.id.drawerlayout)!!\r\n        val toggle = ActionBarDrawerToggle(\r\n            this, drawer, toolbar, R.string.bar_title,\r\n            R.string.navigation_drawer_close\r\n        )\r\n        drawer.addDrawerListener(toggle)\r\n        toggle.syncState()\r\n    }\r\n\r\n    private fun initNavigationView() {\r\n\r\n        val navigationView: NavigationView = findViewById(R.id.nav_view)\r\n        navigationView.setNavigationItemSelectedListener(this)\r\n\r\n        val headerView: View = LayoutInflater.from(this)\r\n            .inflate(R.layout.nav_header_main, navigationView, false)\r\n        //Header para datos del usuario\r\n        navigationView.removeHeaderView(headerView)\r\n        //para actualizar los datos del header\r\n        navigationView.addHeaderView(headerView)\r\n\r\n        val tvUser: TextView = headerView.findViewById(R.id.tvUser)\r\n        tvUser.text = LoginActivity.useremail\r\n\r\n    }\r\n\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.nav_perfil -> callPerfilActivity()\r\n            R.id.nav_inicio -> callInicioActivity()\r\n            R.id.nav_plantillas -> callPlantillasActivity()\r\n            R.id.nav_ejercicio -> callEjercicioActivity()\r\n            R.id.nav_maps -> callMapsActivity()\r\n            R.id.nav_seguimiento -> callSeguimientoActivity()\r\n            R.id.nav_ranking -> callRankingActivity()\r\n            R.id.nav_chat -> callChatActivity()\r\n            R.id.logOut -> signOut()\r\n            R.id.nav_metas -> callMetasActivity()\r\n        }\r\n\r\n        drawer.closeDrawer(GravityCompat.START) // cerrar menu\r\n\r\n        return true\r\n    }\r\n\r\n    private fun callPerfilActivity() {\r\n        val intent = Intent(this, PerfilActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callInicioActivity() {\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callPlantillasActivity() {\r\n        val intent = Intent(this, PlantillasActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callEjercicioActivity() {\r\n        val intent = Intent(this, EjecicioActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMapsActivity() {\r\n        val intent = Intent(this, MapsActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callSeguimientoActivity() {\r\n        val intent = Intent(this, SeguimientoActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callRankingActivity() {\r\n        val intent = Intent(this, RankingActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callChatActivity() {\r\n        val intent = Intent(this, ChatActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMetasActivity() {\r\n        val intent = Intent(this, RecordActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun signOut() {\r\n        LoginActivity.useremail = \"\"\r\n        FirebaseAuth.getInstance().signOut()\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(\"727481893022-adct709pnvj5tlihh532i6gjgm26thh6.apps.googleusercontent.com\")\r\n            .requestEmail()\r\n            .build()\r\n        val googleSignInClient = GoogleSignIn.getClient(this, gso)\r\n        googleSignInClient.signOut()\r\n        //Cierra sesion y manda devuelta al login\r\n        startActivity(Intent(this, LoginActivity::class.java))\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wildtracker/ui/RankingActivity.kt b/app/src/main/java/com/example/wildtracker/ui/RankingActivity.kt
--- a/app/src/main/java/com/example/wildtracker/ui/RankingActivity.kt	(revision 141b8f5efa2fada0b95f666ae692c3016c905d93)
+++ b/app/src/main/java/com/example/wildtracker/ui/RankingActivity.kt	(date 1650569586969)
@@ -53,7 +53,7 @@
         navigationView.addHeaderView(headerView)
 
         val tvUser: TextView = headerView.findViewById(R.id.tvUser)
-        tvUser.text = LoginActivity.useremail
+        tvUser.text = MainActivity.user
 
     }
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/Users/Andres/AndroidStudioProjects/Proyecto/app/src/main/res/layout/activity_maps.xml\" value=\"0.1453125\" />\r\n        <entry key=\"..\\:/Users/Andres/AndroidStudioProjects/Proyecto/app/src/main/res/layout/dialog_interface.xml\" value=\"0.33\" />\r\n        <entry key=\"..\\:/Users/Andres/AndroidStudioProjects/Proyecto/app/src/main/res/menu/activity_main_drawer.xml\" value=\"0.33177083333333335\" />\r\n        <entry key=\"..\\:/Users/Santi Asaf/AndroidStudioProjects/Proyecto/app/src/main/res/layout/activity_creador_ejercicios.xml\" value=\"0.21145833333333333\" />\r\n        <entry key=\"..\\:/Users/Santi Asaf/AndroidStudioProjects/Proyecto/app/src/main/res/layout/activity_creador_rutinas.xml\" value=\"0.21145833333333333\" />\r\n        <entry key=\"..\\:/Users/Santi Asaf/AndroidStudioProjects/Proyecto/app/src/main/res/layout/activity_editor_ejercicios.xml\" value=\"0.21145833333333333\" />\r\n        <entry key=\"..\\:/Users/Santi Asaf/AndroidStudioProjects/Proyecto/app/src/main/res/layout/activity_editor_rutinas.xml\" value=\"0.21145833333333333\" />\r\n        <entry key=\"..\\:/Users/Santi Asaf/AndroidStudioProjects/Proyecto/app/src/main/res/layout/activity_plantillas.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/Santi Asaf/AndroidStudioProjects/Proyecto/app/src/main/res/layout/activity_ver_ejercicios.xml\" value=\"0.21145833333333333\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/drawable-hdpi/edit_text_shadow.xml\" value=\"0.168\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/drawable-hdpi/outline_add_photo_alternate_24.xml\" value=\"0.168\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/drawable-hdpi/rounded_message_blue.xml\" value=\"0.2575\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/drawable-hdpi/rounded_message_gray.xml\" value=\"0.2575\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/activity_chat.xml\" value=\"0.1546875\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/activity_maps.xml\" value=\"0.2898550724637681\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/activity_metas.xml\" value=\"0.190625\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/activity_perfil.xml\" value=\"0.22\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/activity_record.xml\" value=\"0.190625\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/app_bar_main.xml\" value=\"0.1546875\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/dialog_interface.xml\" value=\"0.25\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/image_message.xml\" value=\"0.1546875\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/message.xml\" value=\"0.1546875\" />\r\n        <entry key=\"..\\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/menu/main_menu.xml\" value=\"0.1546875\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 141b8f5efa2fada0b95f666ae692c3016c905d93)
+++ b/.idea/misc.xml	(date 1650569587209)
@@ -21,11 +21,15 @@
         <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/activity_metas.xml" value="0.190625" />
         <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/activity_perfil.xml" value="0.22" />
         <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/activity_record.xml" value="0.190625" />
+        <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/activity_terms.xml" value="0.1" />
         <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/app_bar_main.xml" value="0.1546875" />
         <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/dialog_interface.xml" value="0.25" />
         <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/image_message.xml" value="0.1546875" />
-        <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/message.xml" value="0.1546875" />
+        <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/message.xml" value="0.25" />
+        <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/layout/nav_header_main.xml" value="0.184375" />
+        <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/menu/activity_main_drawer.xml" value="0.12239583333333333" />
         <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/menu/main_menu.xml" value="0.1546875" />
+        <entry key="..\:/Users/aalex/StudioProjects/Proyecto/app/src/main/res/menu/navigation.xml" value="0.12239583333333333" />
       </map>
     </option>
   </component>
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <runningDeviceTargetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"RUNNING_DEVICE_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"SERIAL_NUMBER\" />\r\n            <value value=\"adb-7df872ad-OpaXCd._adb-tls-connect._tcp\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </runningDeviceTargetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2022-04-20T22:04:24.986399700Z\" />\r\n    <targetsSelectedWithDialog>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\aalex\\.android\\avd\\Pixel_4_Android_11.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetsSelectedWithDialog>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 141b8f5efa2fada0b95f666ae692c3016c905d93)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1650568254152)
@@ -7,12 +7,12 @@
         <deviceKey>
           <Key>
             <type value="SERIAL_NUMBER" />
-            <value value="adb-7df872ad-OpaXCd._adb-tls-connect._tcp" />
+            <value value="adb-R52M40L89RR-A07J5G._adb-tls-connect._tcp" />
           </Key>
         </deviceKey>
       </Target>
     </runningDeviceTargetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2022-04-20T22:04:24.986399700Z" />
+    <timeTargetWasSelectedWithDropDown value="2022-04-21T19:06:52.929074600Z" />
     <targetsSelectedWithDialog>
       <Target>
         <type value="QUICK_BOOT_TARGET" />
Index: app/src/main/java/com/example/wildtracker/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@file:Suppress(\"DEPRECATION\")\r\n\r\npackage com.example.wildtracker\r\n\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.widget.doOnTextChanged\r\nimport com.example.wildtracker.databinding.ActivityLoginBinding\r\nimport com.example.wildtracker.ui.MainActivity\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.gms.common.api.ApiException\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.GoogleAuthProvider\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport kotlin.properties.Delegates\r\n\r\n\r\nclass LoginActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityLoginBinding\r\n    private lateinit var firebaseAuth: FirebaseAuth\r\n\r\n\r\n    companion object {\r\n        var useremail: String = \" \"\r\n        lateinit var providerSession: String\r\n        private const val RC_SIGN_IN = 100\r\n        private const val TAG = \"GOOGLE_SIGN_IN_TAG\"\r\n    }\r\n\r\n    private var email by Delegates.notNull<String>()\r\n    private var password by Delegates.notNull<String>()\r\n    //private var ConfirmPassword by Delegates.notNull<String>()\r\n\r\n    private lateinit var etEmail: EditText\r\n    private lateinit var etPassword: EditText\r\n\r\n    //  private lateinit var etconfirmPassword: EditText\r\n    private lateinit var lyTerms: LinearLayout\r\n\r\n    private lateinit var mAuth: FirebaseAuth\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityLoginBinding.inflate(layoutInflater)\r\n        setContentView(R.layout.activity_login)\r\n        setContentView(binding.root)\r\n\r\n        lyTerms = findViewById(R.id.lyTerms)\r\n        lyTerms.visibility = View.INVISIBLE\r\n        etEmail = findViewById(R.id.etEmail)\r\n        etPassword = findViewById(R.id.etPassword)\r\n        //  etconfirmPassword = findViewById(R.id.etconfirmPassword)\r\n        mAuth = FirebaseAuth.getInstance()\r\n        //  etconfirmPassword.visibility = View.INVISIBLE\r\n\r\n        manageButtonLogin()\r\n        etEmail.doOnTextChanged { text, start, before, count -> manageButtonLogin() }\r\n        etPassword.doOnTextChanged { text, start, before, count -> manageButtonLogin() }\r\n        // etconfirmPassword.doOnTextChanged { text, start, before, count ->  manageButtonLogin() }\r\n\r\n\r\n\r\n\r\n        //init firebase auth\r\n        firebaseAuth = FirebaseAuth.getInstance()\r\n        checkUser()\r\n\r\n        //Google Sign In Button\r\n        binding.btSignGoogle.setOnClickListener {\r\n            signInGoogle()\r\n        }\r\n\r\n\r\n    }\r\n    @Deprecated(\"Deprecated in Java\")\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if (requestCode == RC_SIGN_IN) {\r\n\r\n            Log.d(TAG, \"onActivityResult: Google SignIn intent result\")\r\n            //llamar a la funcion principal\r\n\r\n            try {\r\n                val accountTask = GoogleSignIn.getSignedInAccountFromIntent(data)\r\n                val account = accountTask.getResult(ApiException::class.java)\r\n\r\n                if (account != null) {\r\n                    email = account.email.toString()\r\n                    val credential = GoogleAuthProvider.getCredential(account.idToken, null)\r\n                    //usar el proveedor para las auth de firebaseUser\r\n                    mAuth.signInWithCredential(credential).addOnCompleteListener {\r\n                        if (it.isSuccessful) goHome(email, \"Google\")\r\n                        else Toast.makeText(\r\n                            this,\r\n                            \"Error en la conexión con Google\",\r\n                            Toast.LENGTH_SHORT\r\n                        ).show()\r\n\r\n                    }\r\n                }\r\n\r\n            } catch (e: Exception) {\r\n                Log.d(TAG, \"onActivityResult:${e.message}\")\r\n                Toast.makeText(this, \"Error en la conexión con Google\", Toast.LENGTH_SHORT).show()\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    fun callSignInGoogle(view: View) {\r\n        signInGoogle()\r\n    }\r\n\r\n    private fun signInGoogle() {\r\n        //Configure google sign in\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(\"727481893022-adct709pnvj5tlihh532i6gjgm26thh6.apps.googleusercontent.com\")\r\n            //No pasa nada si esta en rojo, es el id del usuario\r\n            .requestEmail() //Solo necesitamos el correo de la cuenta\r\n            .build()\r\n        val googleSignInClient = GoogleSignIn.getClient(this, gso)\r\n        startActivityForResult(googleSignInClient.signInIntent, RC_SIGN_IN)\r\n    }\r\n\r\n\r\n    private fun checkUser() {\r\n        //chack if user is logged in or not\r\n        val firebaseUser = firebaseAuth.currentUser\r\n        if (firebaseUser != null) {\r\n            //user is LoggedIn\r\n            startActivity(Intent(this@LoginActivity, MainActivity::class.java))\r\n            finish()\r\n        }\r\n    }\r\n\r\n\r\n    public override fun onStart() {\r\n        super.onStart()\r\n        //Comprueba si hay usuario con sesión iniciada\r\n        val currentUser = FirebaseAuth.getInstance().currentUser\r\n        if (currentUser != null) goHome(currentUser.email.toString(), currentUser.providerId)\r\n\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        //Cuando pulse por atrasque se vea solo la pantalla de inicio de aplicación, no vuelva al inicio de sesion\r\n        val startMain = Intent(Intent.ACTION_MAIN)\r\n        startMain.addCategory(Intent.CATEGORY_HOME)\r\n        startMain.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n        startActivity(startMain)\r\n    }\r\n\r\n\r\n    private fun manageButtonLogin(){\r\n\r\n        val tvLogin = findViewById<TextView>(R.id.tvLogin) //administrar el btn login\r\n        email = etEmail.text.toString()\r\n        password = etPassword.text.toString()\r\n        //   ConfirmPassword = etconfirmPassword.text.toString()\r\n\r\n        //validar datos del login\r\n        if (TextUtils.isEmpty(password) || !ValidateEmail.isEmail(email)) {\r\n\r\n            tvLogin.setBackgroundColor(ContextCompat.getColor(this, R.color.gray))\r\n            tvLogin.isEnabled = false\r\n            //    etconfirmPassword.visibility = View.VISIBLE\r\n\r\n        } else {\r\n            tvLogin.setBackgroundColor(ContextCompat.getColor(this, R.color.green))\r\n            tvLogin.isEnabled = true\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /*  private fun confirmPass(): Boolean {\r\n           var etPassword: EditText = findViewById(R.id.etPassword)\r\n           var etconfirmPassword: EditText = findViewById(R.id.etconfirmPassword)\r\n          password = etPassword.text.toString()\r\n          ConfirmPassword = etconfirmPassword.text.toString()\r\n          return ConfirmPassword.equals(password)\r\n      }\r\n\r\n     */\r\n\r\n    fun login(view: View) {\r\n        loginUser()\r\n    }\r\n\r\n    private fun loginUser() {\r\n        email = etEmail.text.toString()\r\n        password = etPassword.text.toString()\r\n        //  ConfirmPassword = etconfirmPassword.text.toString()\r\n        var tvLogin = findViewById<TextView>(R.id.tvLogin) //administrar el btn login\r\n        mAuth.signInWithEmailAndPassword(email, password)\r\n            .addOnCompleteListener(this){ task ->\r\n                if (task.isSuccessful)  goHome(email, \"email\")\r\n                else {\r\n                    if (lyTerms.visibility == View.INVISIBLE) {\r\n                        lyTerms.visibility = View.VISIBLE\r\n                    } else {\r\n                        val cbAcept = findViewById<CheckBox>(R.id.cbAcept)\r\n                        if (cbAcept.isChecked) register()\r\n                    }\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n    fun goHome(email: String, provider: String) {\r\n\r\n        useremail = email\r\n        providerSession = provider\r\n\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\")\r\n    private fun register() {\r\n\r\n        email = etEmail.text.toString()\r\n        password = etPassword.text.toString()\r\n\r\n        FirebaseAuth.getInstance().createUserWithEmailAndPassword(email, password)\r\n            .addOnCompleteListener {\r\n                if (it.isSuccessful) {\r\n\r\n                    val dateRegister = SimpleDateFormat(\"dd/MM/yyyy\").format(Date())\r\n                    val dbRegister = FirebaseFirestore.getInstance()\r\n                    dbRegister.collection(\"users\").document(email).set(\r\n                        hashMapOf(\r\n                            \"user\" to email,\r\n                            \"dateRegister\" to dateRegister\r\n                        )\r\n                    )\r\n\r\n                    goHome(email, \"email\")\r\n                } else Toast.makeText(this, \"Error, algo ha ido mal :(\", Toast.LENGTH_SHORT).show()\r\n            }\r\n    }\r\n\r\n    fun goTerms(v: View){\r\n        val intent = Intent(this, TermsActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    fun forgotPassword(view: View) {\r\n        //startActivity(Intent(this, ForgotPasswordActivity::class.java))\r\n        resetPassword()\r\n    }\r\n\r\n    private fun resetPassword(){\r\n        val e = etEmail.text.toString()\r\n        if (!TextUtils.isEmpty(e)) {\r\n            mAuth.sendPasswordResetEmail(e)\r\n                .addOnCompleteListener { task ->\r\n                    if (task.isSuccessful) Toast.makeText(\r\n                        this,\r\n                        \"Email Enviado a $e\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                    else Toast.makeText(\r\n                        this,\r\n                        \"No se encontró el usuario con este correo\",\r\n                        Toast.LENGTH_SHORT\r\n                    ).show()\r\n                }\r\n        } else Toast.makeText(this, \"Indica un email\", Toast.LENGTH_SHORT).show()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wildtracker/LoginActivity.kt b/app/src/main/java/com/example/wildtracker/LoginActivity.kt
--- a/app/src/main/java/com/example/wildtracker/LoginActivity.kt	(revision 141b8f5efa2fada0b95f666ae692c3016c905d93)
+++ b/app/src/main/java/com/example/wildtracker/LoginActivity.kt	(date 1650564960431)
@@ -155,6 +155,14 @@
         if (currentUser != null) goHome(currentUser.email.toString(), currentUser.providerId)
 
     }
+    public override fun onResume() {
+        super.onResume()
+        //Comprueba si hay usuario con sesión iniciada
+        val currentUser = FirebaseAuth.getInstance().currentUser
+        if (currentUser != null) goHome(currentUser.email.toString(), currentUser.providerId)
+
+    }
+
 
     override fun onBackPressed() {
         //Cuando pulse por atrasque se vea solo la pantalla de inicio de aplicación, no vuelva al inicio de sesion
Index: app/src/main/java/com/example/wildtracker/ui/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wildtracker.ui\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport com.example.wildtracker.LoginActivity\r\nimport com.example.wildtracker.LoginActivity.Companion.useremail\r\nimport com.example.wildtracker.R\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.firebase.auth.FirebaseAuth\r\n\r\nclass MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {\r\n    private lateinit var drawer: DrawerLayout\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n        initToolbar()\r\n        initNavigationView()\r\n\r\n    }\r\n\r\n    private fun initToolbar() {\r\n        val toolbar: androidx.appcompat.widget.Toolbar = findViewById(R.id.toolbar_main)\r\n        setSupportActionBar(toolbar)\r\n\r\n        drawer = findViewById(R.id.drawerlayout)\r\n        val toggle = ActionBarDrawerToggle(\r\n            this, drawer, toolbar, R.string.bar_title,\r\n            R.string.navigation_drawer_close\r\n        )\r\n        drawer.addDrawerListener(toggle)\r\n        toggle.syncState()\r\n    }\r\n\r\n    private fun initNavigationView() {\r\n\r\n        val navigationView: NavigationView = findViewById(R.id.nav_view)\r\n        navigationView.setNavigationItemSelectedListener(this)\r\n\r\n        val headerView: View = LayoutInflater.from(this)\r\n            .inflate(R.layout.nav_header_main, navigationView, false)\r\n        //Header para datos del usuario\r\n        navigationView.removeHeaderView(headerView)\r\n        //para actualizar los datos del header\r\n        navigationView.addHeaderView(headerView)\r\n\r\n        val tvUser: TextView = headerView.findViewById(R.id.tvUser)\r\n        tvUser.text = useremail\r\n\r\n    }\r\n\r\n\r\n    fun callSignOut(view: View) {\r\n        signOut()\r\n    }\r\n\r\n    fun signOut() {\r\n\r\n        useremail = \"\"\r\n        FirebaseAuth.getInstance().signOut()\r\n\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(\"727481893022-adct709pnvj5tlihh532i6gjgm26thh6.apps.googleusercontent.com\")\r\n            .requestEmail()\r\n            .build()\r\n\r\n        val googleSignInClient = GoogleSignIn.getClient(this, gso)\r\n        googleSignInClient.signOut()\r\n\r\n\r\n        //Cierra sesion y manda devuelta al login\r\n\r\n\r\n        startActivity(Intent(this, LoginActivity::class.java))\r\n    }\r\n\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.nav_perfil -> callPerfilActivity()\r\n            R.id.nav_inicio -> callInicioActivity()\r\n            R.id.nav_plantillas -> callPlantillasActivity()\r\n            R.id.nav_ejercicio -> callEjercicioActivity()\r\n            R.id.nav_maps -> callMapsActivity()\r\n            R.id.nav_seguimiento -> callSeguimientoActivity()\r\n            R.id.nav_ranking -> callRankingActivity()\r\n            R.id.nav_chat -> callChatActivity()\r\n            R.id.logOut -> signOut()\r\n            R.id.nav_metas -> callMetasActivity()\r\n        }\r\n\r\n        drawer.closeDrawer(GravityCompat.START) // cerrar menu\r\n\r\n        return true\r\n    }\r\n\r\n    private fun callPerfilActivity() {\r\n        val intent = Intent(this, PerfilActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callInicioActivity() {\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callPlantillasActivity() {\r\n        val intent = Intent(this, PlantillasActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callEjercicioActivity() {\r\n        val intent = Intent(this, EjecicioActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMapsActivity() {\r\n        val intent = Intent(this, MapsActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callSeguimientoActivity() {\r\n        val intent = Intent(this, SeguimientoActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callRankingActivity() {\r\n        val intent = Intent(this, RankingActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callChatActivity() {\r\n        val intent = Intent(this, ChatActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMetasActivity() {\r\n        val intent = Intent(this, RecordActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wildtracker/ui/MainActivity.kt b/app/src/main/java/com/example/wildtracker/ui/MainActivity.kt
--- a/app/src/main/java/com/example/wildtracker/ui/MainActivity.kt	(revision 141b8f5efa2fada0b95f666ae692c3016c905d93)
+++ b/app/src/main/java/com/example/wildtracker/ui/MainActivity.kt	(date 1650569411814)
@@ -21,15 +21,18 @@
 class MainActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {
     private lateinit var drawer: DrawerLayout
 
-
+ companion object{
+       val auth: String? = FirebaseAuth.getInstance().currentUser?.email
+    var user =  auth
+}
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_main)
 
         initToolbar()
         initNavigationView()
-
     }
+
 
     private fun initToolbar() {
         val toolbar: androidx.appcompat.widget.Toolbar = findViewById(R.id.toolbar_main)
Index: app/src/main/res/drawable-hdpi/drawable/button_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <item android:color=\"#999999\" android:state_enabled=\"false\"/>\r\n    <item android:color=\"@color/colorPrimaryDark\" android:state_enabled=\"true\"/>\r\n</selector>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable-hdpi/drawable/button_selector.xml b/app/src/main/res/drawable-hdpi/drawable/button_selector.xml
--- a/app/src/main/res/drawable-hdpi/drawable/button_selector.xml	(revision 141b8f5efa2fada0b95f666ae692c3016c905d93)
+++ b/app/src/main/res/drawable-hdpi/drawable/button_selector.xml	(date 1650510442458)
@@ -1,5 +1,11 @@
 <?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:color="#999999" android:state_enabled="false"/>
-    <item android:color="@color/colorPrimaryDark" android:state_enabled="true"/>
+<selector xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://schemas.android.com/apk/res/android ">
+    <item
+        android:color="#999999"
+        android:state_enabled="false" />
+    <item
+        android:color="@color/colorPrimaryDark"
+        android:state_enabled="true" />
 </selector>
Index: app/src/main/java/com/example/wildtracker/ui/ChatActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.wildtracker.ui\r\n\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.view.View\r\nimport android.widget.ProgressBar\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.wildtracker.LoginActivity\r\nimport com.example.wildtracker.R\r\nimport com.example.wildtracker.SignInActivity\r\nimport com.example.wildtracker.databinding.ActivityChatBinding\r\nimport com.example.wildtracker.model.*\r\nimport com.firebase.ui.database.FirebaseRecyclerOptions\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.database.DatabaseReference\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.ktx.database\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.firebase.storage.StorageReference\r\nimport com.google.firebase.storage.ktx.storage\r\n\r\nclass ChatActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {\r\n    private lateinit var binding: ActivityChatBinding\r\n    private lateinit var manager: LinearLayoutManager\r\n    private lateinit var drawer: DrawerLayout\r\n\r\n    private val openDocument = registerForActivityResult(MyOpenDocumentContract()) { uri ->\r\n        onImageSelected(uri)\r\n    }\r\n\r\n    // TODO: implement Firebase instance variables\r\n    // Firebase instance variables\r\n    private lateinit var auth: FirebaseAuth\r\n\r\n    private lateinit var db: FirebaseDatabase\r\n    private lateinit var adapter: FriendlyMessageAdapter\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        // This codelab uses View Binding\r\n        // See: https://developer.android.com/topic/libraries/view-binding\r\n        binding = ActivityChatBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        initToolbar()\r\n        initNavigationView()\r\n/*\r\n        if (BuildConfig.DEBUG) {\r\n            Firebase.database.useEmulator(\"10.0.2.2\", 9000)\r\n            Firebase.auth.useEmulator(\"10.0.2.2\", 9099)\r\n            Firebase.storage.useEmulator(\"10.0.2.2\", 9199)\r\n        }\r\n*/\r\n        // Initialize Firebase Auth and check if the user is signed in\r\n        // TODO: implement\r\n        auth = Firebase.auth\r\n        if (auth.currentUser == null) {\r\n            // Not signed in, launch the Sign In activity\r\n            startActivity(Intent(this, SignInActivity::class.java))\r\n            finish()\r\n            return\r\n        }\r\n        // Initialize Realtime Database and FirebaseRecyclerAdapter\r\n        // TODO: implement\r\n        db = Firebase.database\r\n        val messagesRef = db.reference.child(MESSAGES_CHILD)\r\n        // The FirebaseRecyclerAdapter class and options come from the FirebaseUI library\r\n        // See: https://github.com/firebase/FirebaseUI-Android\r\n        val options = FirebaseRecyclerOptions.Builder<FriendlyMessage>()\r\n            .setQuery(messagesRef, FriendlyMessage::class.java)\r\n            .build()\r\n        adapter = FriendlyMessageAdapter(options, getUserName())\r\n        binding.progressBar.visibility = ProgressBar.INVISIBLE\r\n        manager = LinearLayoutManager(this)\r\n        manager.stackFromEnd = true\r\n        binding.messageRecyclerView.layoutManager = manager\r\n        binding.messageRecyclerView.adapter = adapter\r\n\r\n        // Scroll down when a new message arrives\r\n        // See MyScrollToBottomObserver for details\r\n        adapter.registerAdapterDataObserver(\r\n            MyScrollToBottomObserver(binding.messageRecyclerView, adapter, manager)\r\n        )\r\n\r\n        // Disable the send button when there's no text in the input field\r\n        // See MyButtonObserver for details\r\n        binding.messageEditText.addTextChangedListener(MyButtonObserver(binding.sendButton))\r\n        // When the send button is clicked, send a text message\r\n        binding.sendButton.setOnClickListener {\r\n            val friendlyMessage = FriendlyMessage(\r\n                binding.messageEditText.text.toString(),\r\n                getUserName(),\r\n                getPhotoUrl(),\r\n                null /* no image */\r\n            )\r\n            db.reference.child(MESSAGES_CHILD).push().setValue(friendlyMessage)\r\n            binding.messageEditText.setText(\"\")\r\n        }\r\n\r\n\r\n        // When the image button is clicked, launch the image picker\r\n        binding.addMessageImageView.setOnClickListener {\r\n            openDocument.launch(arrayOf(\"image/*\"))\r\n        }\r\n    }\r\n\r\n    public override fun onStart() {\r\n        super.onStart()\r\n        // Check if user is signed in.\r\n        // TODO: implement\r\n        if (auth.currentUser == null) {\r\n            // Not signed in, launch the Sign In activity\r\n            startActivity(Intent(this, SignInActivity::class.java))\r\n            finish()\r\n            return\r\n        }\r\n    }\r\n\r\n    public override fun onPause() {\r\n        adapter.stopListening()\r\n        super.onPause()\r\n    }\r\n\r\n    public override fun onResume() {\r\n        super.onResume()\r\n        adapter.startListening()\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val inflater = menuInflater\r\n        inflater.inflate(R.menu.main_menu, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            R.id.sign_out_menu -> {\r\n                signOut()\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }\r\n\r\n    private fun onImageSelected(uri: Uri) {\r\n        // TODO: implement\r\n        Log.d(TAG, \"Uri: $uri\")\r\n        val user = auth.currentUser\r\n        val tempMessage = FriendlyMessage(null, getUserName(), getPhotoUrl(), LOADING_IMAGE_URL)\r\n        db.reference\r\n            .child(MESSAGES_CHILD)\r\n            .push()\r\n            .setValue(\r\n                tempMessage,\r\n                DatabaseReference.CompletionListener { databaseError, databaseReference ->\r\n                    if (databaseError != null) {\r\n                        Log.w(\r\n                            TAG, \"Unable to write message to database.\",\r\n                            databaseError.toException()\r\n                        )\r\n                        return@CompletionListener\r\n                    }\r\n\r\n                    // Build a StorageReference and then upload the file\r\n                    val key = databaseReference.key\r\n                    val storageReference = Firebase.storage\r\n                        .getReference(user!!.uid)\r\n                        .child(key!!)\r\n                        .child(uri.lastPathSegment!!)\r\n                    putImageInStorage(storageReference, uri, key)\r\n                })\r\n    }\r\n\r\n    private fun putImageInStorage(storageReference: StorageReference, uri: Uri, key: String?) {\r\n        // Upload the image to Cloud Storage\r\n        // TODO: implement\r\n        // First upload the image to Cloud Storage\r\n        storageReference.putFile(uri)\r\n            .addOnSuccessListener(\r\n                this\r\n            ) { taskSnapshot -> // After the image loads, get a public downloadUrl for the image\r\n                // and add it to the message.\r\n                taskSnapshot.metadata!!.reference!!.downloadUrl\r\n                    .addOnSuccessListener { uri ->\r\n                        val friendlyMessage =\r\n                            FriendlyMessage(null, getUserName(), getPhotoUrl(), uri.toString())\r\n                        db.reference\r\n                            .child(MESSAGES_CHILD)\r\n                            .child(key!!)\r\n                            .setValue(friendlyMessage)\r\n                    }\r\n            }\r\n            .addOnFailureListener(this) { e ->\r\n                Log.w(\r\n                    TAG,\r\n                    \"Image upload task was unsuccessful.\",\r\n                    e\r\n                )\r\n            }\r\n    }\r\n\r\n    private fun getPhotoUrl(): String? {\r\n        val user = auth.currentUser\r\n        return user?.photoUrl?.toString()\r\n    }\r\n\r\n    private fun getUserName(): String? {\r\n        val user = auth.currentUser\r\n        return if (user != null) {\r\n            user.displayName\r\n        } else ANONYMOUS\r\n    }\r\n\r\n\r\n\r\n    companion object {\r\n        private const val TAG = \"MainActivity\"\r\n        const val MESSAGES_CHILD = \"messages\"\r\n        const val ANONYMOUS = \"anonymous\"\r\n        private const val LOADING_IMAGE_URL = \"https://www.google.com/images/spin-32.gif\"\r\n    }\r\n    private fun initToolbar() {\r\n        val toolbar: androidx.appcompat.widget.Toolbar = findViewById(R.id.toolbar_main)\r\n        toolbar.title = \"Ranking\"\r\n        setSupportActionBar(toolbar)\r\n\r\n        drawer = findViewById(R.id.drawerlayout)!!\r\n        val toggle = ActionBarDrawerToggle(\r\n            this, drawer, toolbar, R.string.bar_title,\r\n            R.string.navigation_drawer_close\r\n        )\r\n        drawer.addDrawerListener(toggle)\r\n        toggle.syncState()\r\n    }\r\n\r\n    private fun initNavigationView() {\r\n\r\n        val navigationView: NavigationView = findViewById(R.id.nav_view)\r\n        navigationView.setNavigationItemSelectedListener(this)\r\n\r\n        val headerView: View = LayoutInflater.from(this)\r\n            .inflate(R.layout.nav_header_main, navigationView, false)\r\n        //Header para datos del usuario\r\n        navigationView.removeHeaderView(headerView)\r\n        //para actualizar los datos del header\r\n        navigationView.addHeaderView(headerView)\r\n\r\n        val tvUser: TextView = headerView.findViewById(R.id.tvUser)\r\n        tvUser.text = LoginActivity.useremail\r\n\r\n    }\r\n\r\n    override fun onNavigationItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.nav_perfil -> callPerfilActivity()\r\n            R.id.nav_inicio -> callInicioActivity()\r\n            R.id.nav_plantillas -> callPlantillasActivity()\r\n            R.id.nav_ejercicio -> callEjercicioActivity()\r\n            R.id.nav_maps -> callMapsActivity()\r\n            R.id.nav_seguimiento -> callSeguimientoActivity()\r\n            R.id.nav_ranking -> callRankingActivity()\r\n            R.id.nav_chat -> callChatActivity()\r\n            R.id.logOut -> signOut()\r\n            R.id.nav_metas -> callMetasActivity()\r\n        }\r\n\r\n        drawer.closeDrawer(GravityCompat.START) // cerrar menu\r\n\r\n        return true\r\n    }\r\n\r\n    private fun callPerfilActivity() {\r\n        val intent = Intent(this, PerfilActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callInicioActivity() {\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callPlantillasActivity() {\r\n        val intent = Intent(this, PlantillasActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callEjercicioActivity() {\r\n        val intent = Intent(this, EjecicioActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMapsActivity() {\r\n        val intent = Intent(this, MapsActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callSeguimientoActivity() {\r\n        val intent = Intent(this, SeguimientoActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callRankingActivity() {\r\n        val intent = Intent(this, RankingActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callChatActivity() {\r\n        val intent = Intent(this, ChatActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun callMetasActivity() {\r\n        val intent = Intent(this, RecordActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun signOut() {\r\n        LoginActivity.useremail = \"\"\r\n        FirebaseAuth.getInstance().signOut()\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(\"727481893022-adct709pnvj5tlihh532i6gjgm26thh6.apps.googleusercontent.com\")\r\n            .requestEmail()\r\n            .build()\r\n        val googleSignInClient = GoogleSignIn.getClient(this, gso)\r\n        googleSignInClient.signOut()\r\n        //Cierra sesion y manda devuelta al login\r\n        startActivity(Intent(this, LoginActivity::class.java))\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/wildtracker/ui/ChatActivity.kt b/app/src/main/java/com/example/wildtracker/ui/ChatActivity.kt
--- a/app/src/main/java/com/example/wildtracker/ui/ChatActivity.kt	(revision 141b8f5efa2fada0b95f666ae692c3016c905d93)
+++ b/app/src/main/java/com/example/wildtracker/ui/ChatActivity.kt	(date 1650569671787)
@@ -29,6 +29,7 @@
 import com.google.firebase.database.DatabaseReference
 import com.google.firebase.database.FirebaseDatabase
 import com.google.firebase.database.ktx.database
+import com.google.firebase.firestore.FirebaseFirestore
 import com.google.firebase.ktx.Firebase
 import com.google.firebase.storage.StorageReference
 import com.google.firebase.storage.ktx.storage
@@ -37,6 +38,7 @@
     private lateinit var binding: ActivityChatBinding
     private lateinit var manager: LinearLayoutManager
     private lateinit var drawer: DrawerLayout
+    private val accesdata = FirebaseFirestore.getInstance()
 
     private val openDocument = registerForActivityResult(MyOpenDocumentContract()) { uri ->
         onImageSelected(uri)
@@ -45,7 +47,6 @@
     // TODO: implement Firebase instance variables
     // Firebase instance variables
     private lateinit var auth: FirebaseAuth
-
     private lateinit var db: FirebaseDatabase
     private lateinit var adapter: FriendlyMessageAdapter
 
@@ -138,6 +139,12 @@
     public override fun onResume() {
         super.onResume()
         adapter.startListening()
+        getUserName()
+    }
+
+    override fun onRestart() {
+        super.onRestart()
+        getUserName()
     }
 
     override fun onCreateOptionsMenu(menu: Menu): Boolean {
@@ -219,10 +226,7 @@
     }
 
     private fun getUserName(): String? {
-        val user = auth.currentUser
-        return if (user != null) {
-            user.displayName
-        } else ANONYMOUS
+        return MainActivity.user
     }
 
 
@@ -230,7 +234,7 @@
     companion object {
         private const val TAG = "MainActivity"
         const val MESSAGES_CHILD = "messages"
-        const val ANONYMOUS = "anonymous"
+        const val ANONYMOUS = "Sanonymous"
         private const val LOADING_IMAGE_URL = "https://www.google.com/images/spin-32.gif"
     }
     private fun initToolbar() {
@@ -260,7 +264,7 @@
         navigationView.addHeaderView(headerView)
 
         val tvUser: TextView = headerView.findViewById(R.id.tvUser)
-        tvUser.text = LoginActivity.useremail
+        tvUser.text = MainActivity.user
 
     }
 
